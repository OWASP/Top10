// LICENSE : MIT
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadRulesConfigFromPresets = exports.createFlatPresetRulesConfigFromRawPresetRuleConfig = exports.createFlatRulesConfigFromRawRulesConfig = void 0;
var module_interop_1 = require("@textlint/module-interop");
var utils_1 = require("@textlint/utils");
var config_util_1 = require("./config-util");
/**
 * Convert config of preset to rawRulesConfig flat path format.
 *
 * This function convert Preset nesting rule to flat path
 * ```
 * {
 *  "x" : true
 *  "preset-a" : { "rule-name": "value" }
 * }
 * ```
 * =>
 * ```
 * { "x": true }
 * { "a/rule-name": "value" }
 * ```
 *
 * @param rawRulesConfig
 * @returns {{string: string}}
 */
function createFlatRulesConfigFromRawRulesConfig(rawRulesConfig) {
    if (!rawRulesConfig) {
        return {};
    }
    var rulesConfig = {};
    Object.keys(rawRulesConfig).forEach(function (key) {
        if (config_util_1.isPresetRuleKey(key)) {
            // <preset>/<rule>
            var presetName = key;
            var presetRuleConfig = rawRulesConfig[key];
            Object.assign(rulesConfig, createFlatPresetRulesConfigFromRawPresetRuleConfig(presetRuleConfig, presetName));
            return;
        }
        rulesConfig[key] = rawRulesConfig[key];
    });
    return rulesConfig;
}
exports.createFlatRulesConfigFromRawRulesConfig = createFlatRulesConfigFromRawRulesConfig;
/**
 * create flat `<plugin>/<rule>` option
 * @param {Object} [rulesConfig]
 * @param {string} presetName
 * @returns {Object}
 */
function createFlatPresetRulesConfigFromRawPresetRuleConfig(rulesConfig, presetName) {
    var mapped = {};
    // missing "rulesConfig"
    if (rulesConfig === undefined || typeof rulesConfig !== "object") {
        return mapped;
    }
    Object.keys(rulesConfig).forEach(function (ruleName) {
        var normalizedKey = utils_1.normalizeTextlintPresetSubRuleKey({ preset: presetName, rule: ruleName });
        mapped[normalizedKey] = rulesConfig[ruleName];
    });
    return mapped;
}
exports.createFlatPresetRulesConfigFromRawPresetRuleConfig = createFlatPresetRulesConfigFromRawPresetRuleConfig;
// load rulesConfig from plugins
/**
 *
 * @param presetNames
 * @param {TextLintModuleResolver} moduleResolver
 * @returns {{}}
 */
function loadRulesConfigFromPresets(presetNames, moduleResolver) {
    if (presetNames === void 0) { presetNames = []; }
    var presetRulesConfig = {};
    presetNames.forEach(function (presetName) {
        var pkgPath = moduleResolver.resolvePresetPackageName(presetName);
        var preset = module_interop_1.moduleInterop(require(pkgPath));
        if (!preset.hasOwnProperty("rules")) {
            throw new Error(presetName + " has not rules");
        }
        if (!preset.hasOwnProperty("rulesConfig")) {
            throw new Error(presetName + " has not rulesConfig");
        }
        // set config of <rule> to "<preset>/<rule>"
        Object.assign(presetRulesConfig, createFlatPresetRulesConfigFromRawPresetRuleConfig(preset.rulesConfig, presetName));
    });
    return presetRulesConfig;
}
exports.loadRulesConfigFromPresets = loadRulesConfigFromPresets;
//# sourceMappingURL=preset-loader.js.map