// LICENSE : MIT
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Config = void 0;
var crypto_1 = __importDefault(require("crypto"));
var config_loader_1 = require("./config-loader");
var preset_loader_1 = require("./preset-loader");
var plugin_loader_1 = require("./plugin-loader");
var textlint_module_resolver_1 = require("../engine/textlint-module-resolver");
var separate_by_config_option_1 = require("./separate-by-config-option");
var utils_1 = require("@textlint/utils");
var logger_1 = require("../util/logger");
var md5 = require("md5");
var fs = require("fs");
var assert = require("assert");
var concat = require("unique-concat");
var path = require("path");
var pkgConf = require("read-pkg-up");
function applyNormalizerToList(normalizer, names) {
    return names.map(function (name) {
        return normalizer(name);
    });
}
function applyNormalizerToConfig(normalizer, config) {
    return Object.keys(config).reduce(function (results, key) {
        var shortPluginName = normalizer(key);
        results[shortPluginName] = config[key];
        return results;
    }, {});
}
/**
 * @type {TextlintConfig}
 */
var defaultOptions = Object.freeze({
    // rule package names
    rules: [],
    // disabled rule package names
    // always should start with empty
    disabledRules: [],
    // rules config object
    rulesConfig: {},
    // filter rule package names
    filterRules: [],
    disabledFilterRules: [],
    // rules config object
    filterRulesConfig: {},
    // preset package names
    // e.g.) ["preset-foo"]
    presets: [],
    // plugin package names
    plugins: [],
    // plugin config
    pluginsConfig: {},
    // base directory for loading {rule, config, plugin} modules
    rulesBaseDirectory: undefined,
    // ".textlint" file path
    configFile: undefined,
    // rule directories
    rulePaths: [],
    // formatter file name
    // e.g.) stylish.js => set "stylish"
    // NOTE: default formatter is defined in Engine,
    // because There is difference between TextLintEngine and TextFixEngine.
    formatterName: undefined,
    // --quiet
    quiet: false,
    // --no-color
    color: true,
    // --no-textlintrc
    textlintrc: true,
    // --cache : enable or disable
    cache: false,
    // --cache-location: cache file path
    cacheLocation: path.resolve(process.cwd(), ".textlintcache"),
    // --ignore-path: ".textlintignore" file path
    ignoreFile: path.resolve(process.cwd(), ".textlintignore")
});
// Priority: CLI > Code options > config file
var Config = /** @class */ (function () {
    /**
     * initialize with options.
     * @param {TextlintConfig} options the option object is defined as TextlintConfig.
     * @returns {Config}
     * @constructor
     */
    function Config(options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        /**
         * @type {string|undefined} absolute path to .textlintrc file.
         * - If using .textlintrc, return path to .textlintrc
         * - If using npm config module, return path to main file of the module
         * - If not using config file, return undefined
         */
        this.configFile = options.configFile;
        if (this.configFile) {
            assert.ok(path.isAbsolute(this.configFile), "configFile should be absolute path: " + this.configFile);
        }
        this.rulesBaseDirectory = options.rulesBaseDirectory
            ? options.rulesBaseDirectory
            : defaultOptions.rulesBaseDirectory;
        // rule names that are defined in ,textlintrc
        var moduleResolver = new textlint_module_resolver_1.TextLintModuleResolver({
            rulesBaseDirectory: this.rulesBaseDirectory
        });
        /**
         * @type {string[]} rule key list
         * These rule is set `false` to options
         */
        this.disabledRules = applyNormalizerToList(utils_1.normalizeTextlintRuleKey, options.disabledRules ? options.disabledRules : defaultOptions.disabledRules);
        /**
         * @type {string[]} rule key list
         * rules does not includes disabledRules
         */
        this.rules = applyNormalizerToList(utils_1.normalizeTextlintRuleKey, options.rules ? options.rules : defaultOptions.rules).filter(function (ruleName) {
            return !_this.disabledRules.includes(ruleName);
        });
        /**
         * @type {string[]} rule key list
         * These rule is set `false` to options
         */
        this.disabledFilterRules = applyNormalizerToList(utils_1.normalizeTextlintFilterRuleKey, options.disabledFilterRules ? options.disabledFilterRules : defaultOptions.disabledFilterRules);
        /**
         * @type {string[]} filter rule key list
         */
        this.filterRules = applyNormalizerToList(utils_1.normalizeTextlintFilterRuleKey, options.filterRules ? options.filterRules : defaultOptions.filterRules).filter(function (ruleName) {
            return !_this.disabledFilterRules.includes(ruleName);
        });
        /**
         * @type {string[]} preset key list
         */
        this.presets = applyNormalizerToList(utils_1.normalizeTextlintRulePresetKey, options.presets ? options.presets : defaultOptions.presets);
        // => load plugins
        // this.rules has not contain plugin rules
        // =====================
        this.plugins = applyNormalizerToList(utils_1.normalizeTextlintPluginKey, options.plugins ? options.plugins : defaultOptions.plugins);
        this.pluginsConfig = applyNormalizerToConfig(utils_1.normalizeTextlintPluginKey, options.pluginsConfig ? options.pluginsConfig : defaultOptions.pluginsConfig);
        // rulesConfig
        // load preset package's config and merge it to user defined rules config
        // user config > default preset config
        var presetRulesConfig = preset_loader_1.loadRulesConfigFromPresets(this.presets, moduleResolver);
        this.rulesConfig = applyNormalizerToConfig(utils_1.normalizeTextlintRuleKey, Object.assign({}, presetRulesConfig, options.rulesConfig));
        // filterRulesConfig
        this.filterRulesConfig = applyNormalizerToConfig(utils_1.normalizeTextlintFilterRuleKey, options.filterRulesConfig || defaultOptions.filterRulesConfig);
        /**
         * @type {string[]}
         */
        this.rulePaths = options.rulePaths ? options.rulePaths : defaultOptions.rulePaths;
        /**
         * @type {string}
         */
        this.formatterName = options.formatterName ? options.formatterName : defaultOptions.formatterName;
        /**
         * @type {boolean}
         */
        this.quiet = options.quiet !== undefined ? options.quiet : defaultOptions.quiet;
        /**
         * @type {boolean}
         */
        this.color = options.color !== undefined ? options.color : defaultOptions.color;
        /**
         * @type {boolean}
         */
        this.cache = options.cache !== undefined ? options.cache : defaultOptions.cache;
        /**
         * @type {string}
         */
        this.cacheLocation = options.cacheLocation !== undefined ? options.cacheLocation : defaultOptions.cacheLocation;
        this._assertCacheLocation(this.cacheLocation);
        /**
         * @type {string}
         */
        this.ignoreFile = options.ignoreFile !== undefined ? options.ignoreFile : defaultOptions.ignoreFile;
    }
    Object.defineProperty(Config, "CONFIG_FILE_NAME", {
        /**
         * @return {string} rc config filename
         * it's name use as `.<name>rc`
         */
        get: function () {
            return "textlint";
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Create config object form command line options
     * See options.js
     * @param {object} cliOptions the options is command line option object. @see options.js
     * @returns {Config}
     */
    Config.initWithCLIOptions = function (cliOptions) {
        var options = {};
        options.rules = cliOptions.rule ? cliOptions.rule : defaultOptions.rules;
        // TODO: CLI --filter <rule>?
        options.filterRules = defaultOptions.filterRules;
        options.disabledFilterRules = defaultOptions.disabledFilterRules;
        // TODO: CLI --disable <rule>?
        options.disabledRules = defaultOptions.disabledRules;
        options.presets = cliOptions.preset ? cliOptions.preset : defaultOptions.presets;
        options.plugins = cliOptions.plugin ? cliOptions.plugin : defaultOptions.plugins;
        options.configFile = cliOptions.config ? cliOptions.config : defaultOptions.configFile;
        options.rulePaths = cliOptions.rulesdir ? cliOptions.rulesdir : defaultOptions.rulePaths;
        options.formatterName = cliOptions.format ? cliOptions.format : defaultOptions.formatterName;
        options.quiet = cliOptions.quiet !== undefined ? cliOptions.quiet : defaultOptions.quiet;
        options.color = cliOptions.color !== undefined ? cliOptions.color : defaultOptions.color;
        // --no-textlintrc: disable textlint
        options.textlintrc = cliOptions.textlintrc !== undefined ? cliOptions.textlintrc : defaultOptions.textlintrc;
        // --cache
        options.cache = cliOptions.cache !== undefined ? cliOptions.cache : defaultOptions.cache;
        // --cache-location="path/to/file"
        options.cacheLocation =
            cliOptions.cacheLocation !== undefined
                ? path.resolve(process.cwd(), cliOptions.cacheLocation)
                : defaultOptions.cacheLocation;
        // --rules-base-directory "other/node_modules"
        options.rulesBaseDirectory = cliOptions.rulesBaseDirectory || defaultOptions.rulesBaseDirectory;
        // --ignore-path="path/to/file"
        options.ignoreFile =
            cliOptions.ignorePath !== undefined
                ? path.resolve(process.cwd(), cliOptions.ignorePath)
                : defaultOptions.ignoreFile;
        return this.initWithAutoLoading(options);
    };
    /* eslint-disable complexity */
    /**
     * load config and merge options.
     * These config is user defined options.
     * These config is prefer than preset packages's config that is defined by package author.
     * @param options
     */
    Config.initWithAutoLoading = function (options) {
        if (options === void 0) { options = {}; }
        // Base directory
        var rulesBaseDirectory = options.rulesBaseDirectory
            ? options.rulesBaseDirectory
            : defaultOptions.rulesBaseDirectory;
        // Create resolver
        var moduleResolver = new textlint_module_resolver_1.TextLintModuleResolver({
            rulesBaseDirectory: rulesBaseDirectory
        });
        // => ConfigFile
        // configFile is optional
        // => load .textlintrc
        var loadedResult = typeof options.textlintrc === "undefined" || options.textlintrc
            ? config_loader_1.loadConfig({
                configFileName: this.CONFIG_FILE_NAME,
                configFilePath: options.configFile,
                moduleResolver: moduleResolver,
                cwd: options.cwd
            })
            : {
                config: {},
                filePath: undefined
            };
        var configFileRaw = loadedResult.config;
        var configFilePath = loadedResult.filePath;
        // => Load options from .textlintrc
        var configRuleNamesObject = separate_by_config_option_1.separateEnabledOrDisabled(configFileRaw.rules);
        var configFilterRuleNamesObject = separate_by_config_option_1.separateEnabledOrDisabled(configFileRaw.filters);
        var configPresetNames = configRuleNamesObject.presetNames;
        var configFilePlugins = plugin_loader_1.getPluginNames(configFileRaw);
        var configFilePluginConfig = plugin_loader_1.getPluginConfig(configFileRaw);
        // Notes: vs. loadRulesConfigFromPresets
        // loadRulesConfigFromPresets load rules config from **preset package**. (It is not user defined config. It is defined by package author)
        // In other hands, this line load rules config from .textlintrc. (It is user defined config)
        var configFileRulesConfig = preset_loader_1.createFlatRulesConfigFromRawRulesConfig(configFileRaw.rules);
        var configFileFilterRulesConfig = preset_loader_1.createFlatRulesConfigFromRawRulesConfig(configFileRaw.filters);
        // => User specified Options
        var optionRules = options.rules || [];
        var optionFilterRules = options.filterRules || [];
        var optionDisabledRules = options.disabledRules || [];
        var optionDisabledFilterRules = options.disabledFilterRules || [];
        var optionRulesConfig = options.rulesConfig || {};
        var optionFilterRulesConfig = options.filterRulesConfig || {};
        var optionPlugins = options.plugins || [];
        var optionPresets = options.presets || [];
        var optionPluginsConfig = options.pluginsConfig || {};
        // => Merge options and configFileOptions
        // Priority options > configFile
        var rules = concat(optionRules, configRuleNamesObject.enabledRuleNames);
        var disabledRules = concat(optionDisabledRules, configRuleNamesObject.disabledRuleNames);
        var filterRules = concat(optionFilterRules, configFilterRuleNamesObject.enabledRuleNames);
        var disabledFilterRules = concat(optionDisabledFilterRules, configFilterRuleNamesObject.disabledRuleNames);
        var rulesConfig = Object.assign({}, configFileRulesConfig, optionRulesConfig);
        var filterRulesConfig = Object.assign({}, configFileFilterRulesConfig, optionFilterRulesConfig);
        var plugins = concat(optionPlugins, configFilePlugins);
        var pluginsConfig = Object.assign({}, configFilePluginConfig, optionPluginsConfig);
        var presets = concat(optionPresets, configPresetNames);
        var mergedOptions = Object.assign({}, options, {
            rules: rules,
            disabledRules: disabledRules,
            rulesConfig: rulesConfig,
            filterRules: filterRules,
            disabledFilterRules: disabledFilterRules,
            filterRulesConfig: filterRulesConfig,
            plugins: plugins,
            pluginsConfig: pluginsConfig,
            presets: presets,
            configFile: configFilePath
        });
        return new this(mergedOptions);
    };
    Object.defineProperty(Config.prototype, "hash", {
        /**
         * Return hash string of the config and textlint version
         * @returns {string}
         */
        get: function () {
            try {
                var version = pkgConf.sync({ cwd: __dirname }).pkg.version;
                var toString_1 = JSON.stringify(this.toJSON());
                return md5(version + "-" + toString_1);
            }
            catch (error) {
                // Fallback for some env
                // https://github.com/textlint/textlint/issues/597
                logger_1.Logger.warn("Use random value as hash because calculating hash value throw error", error);
                return crypto_1.default.randomBytes(20).toString("hex");
            }
        },
        enumerable: false,
        configurable: true
    });
    Config.prototype._assertCacheLocation = function (locationPath) {
        var fileStats;
        try {
            fileStats = fs.lstatSync(locationPath);
        }
        catch (ex) {
            fileStats = null;
        }
        if (!fileStats) {
            return;
        }
        // TODO: --cache-location does not support directory
        // We should defined what is default name.
        assert.ok(!fileStats.isDirectory(), "--cache-location doesn't support directory");
    };
    /* eslint-enable complexity */
    Config.prototype.toJSON = function () {
        var _this = this;
        var r = Object.create(null);
        Object.keys(this).forEach(function (key) {
            if (!_this.hasOwnProperty(key)) {
                return;
            }
            var value = _this[key];
            if (value == null) {
                return;
            }
            r[key] = typeof value.toJSON !== "undefined" ? value.toJSON() : value;
        });
        return r;
    };
    return Config;
}());
exports.Config = Config;
//# sourceMappingURL=config.js.map