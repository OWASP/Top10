// LICENSE : MIT
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createConfigFile = void 0;
var utils_1 = require("@textlint/utils");
var fs = require("fs");
var path = require("path");
var isFile = require("is-file");
var readPkg = require("read-pkg");
var config_1 = require("./config");
var logger_1 = require("../util/logger");
/**
 * read package.json if found it
 * @param {string} dir
 * @returns {Promise.<Array.<String>>}
 */
var getTextlintDependencyNames = function (dir) {
    return readPkg(dir)
        .then(function (pkg) {
        var dependencies = pkg.dependencies || {};
        var devDependencies = pkg.devDependencies || {};
        var mergedDependencies = Object.assign({}, dependencies, devDependencies);
        var pkgNames = Object.keys(mergedDependencies);
        return pkgNames.filter(function (pkgName) {
            var ruleOrFilter = pkgName.indexOf(utils_1.TextlintPackageNamePrefix.filterRule) !== -1 ||
                pkgName.indexOf(utils_1.TextlintPackageNamePrefix.rule) !== -1;
            if (pkgName === "textlint-rule-helper") {
                return false;
            }
            return ruleOrFilter;
        });
    })
        .catch(function () {
        return [];
    });
};
/**
 * create object that fill with `defaultValue`
 * @param {Array} array
 * @param {*} defaultValue
 * @returns {Object}
 */
var arrayToObject = function (array, defaultValue) {
    var object = {};
    array.forEach(function (item) {
        object[item] = defaultValue;
    });
    return object;
};
/**
 * Create .textlintrc file
 * @params {string} dir The directory of .textlintrc file
 * @returns {Promise.<number>} The exit code for the operation.
 */
exports.createConfigFile = function (options) {
    var dir = options.dir;
    return getTextlintDependencyNames(dir).then(function (pkgNames) {
        var rcFile = "." + config_1.Config.CONFIG_FILE_NAME + "rc";
        var filePath = path.resolve(dir, rcFile);
        if (isFile(filePath)) {
            logger_1.Logger.error(rcFile + " is already existed.");
            return Promise.resolve(1);
        }
        var filters = pkgNames
            .filter(function (pkgName) {
            return pkgName.indexOf(utils_1.TextlintPackageNamePrefix.filterRule) !== -1;
        })
            .map(function (filterName) {
            return filterName.replace(utils_1.TextlintPackageNamePrefix.filterRule, "");
        });
        var rules = pkgNames
            .filter(function (pkgName) {
            return pkgName.indexOf(utils_1.TextlintPackageNamePrefix.rule) !== -1;
        })
            .map(function (filterName) {
            return filterName.replace(utils_1.TextlintPackageNamePrefix.rule, "");
        });
        var defaultTextlintRc = {
            filters: arrayToObject(filters, true),
            rules: arrayToObject(rules, true)
        };
        var output = JSON.stringify(defaultTextlintRc, null, 2);
        fs.writeFileSync(filePath, output);
        if (options.verbose) {
            logger_1.Logger.log(rcFile + " is created.");
        }
        return Promise.resolve(0);
    });
};
//# sourceMappingURL=config-initializer.js.map