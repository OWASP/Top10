import { moduleInterop } from "@textlint/module-interop";
var debug = require("debug")("textlint:plugin-loader");
var assert = require("assert");
/**
 * get plugin names from `configFileRaw` object
 * @param configFileRaw
 * @returns {Array}
 */
export function getPluginNames(configFileRaw) {
    var plugins = configFileRaw.plugins;
    if (!plugins) {
        return [];
    }
    if (Array.isArray(plugins)) {
        return plugins;
    }
    return Object.keys(plugins);
}
/**
 * get pluginConfig object from `configFileRaw` that is loaded .textlintrc
 * @param {Object} configFileRaw
 * @returns {Object}
 * @example
 * ```js
 * "plugins": {
 *   "pluginA": {},
 *   "pluginB": {}
 * }
 * ```
 *
 * to
 *
 * ```js
 * {
 *   "pluginA": {},
 *   "pluginB": {}
 * }
 * ```
 *
 *
 *
 * ```js
 * "plugins": ["pluginA", "pluginB"]
 * ```
 *
 * to
 *
 * ```
 * // `true` means turn on
 * {
 *   "pluginA": true,
 *   "pluginB": true
 * }
 * ```
 */
export function getPluginConfig(configFileRaw) {
    var plugins = configFileRaw.plugins;
    if (!plugins) {
        return {};
    }
    if (Array.isArray(plugins)) {
        if (plugins.length === 0) {
            return {};
        }
        // { "pluginA": true, "pluginB": true }
        return plugins.reduce(function (results, pluginName) {
            results[pluginName] = true;
            return results;
        }, {});
    }
    return plugins;
}
export function loadAvailableExtensions(pluginNames, moduleResolver) {
    if (pluginNames === void 0) { pluginNames = []; }
    var availableExtensions = [];
    pluginNames.forEach(function (pluginName) {
        var pkgPath = moduleResolver.resolvePluginPackageName(pluginName);
        var plugin = moduleInterop(require(pkgPath));
        if (!plugin.hasOwnProperty("Processor")) {
            return;
        }
        var Processor = plugin.Processor;
        debug(pluginName + " has Processor");
        assert.ok(typeof Processor.availableExtensions === "function", "Processor.availableExtensions() should be implemented");
        availableExtensions.push.apply(availableExtensions, Processor.availableExtensions());
    });
    return availableExtensions;
}
//# sourceMappingURL=plugin-loader.js.map