// LICENSE : MIT
"use strict";
import * as path from "path";
import { createFullPackageName } from "./textlint-package-name-util";
import { PackageNamePrefix } from "../config/package-prefix";
var tryResolve = require("try-resolve");
var debug = require("debug")("textlint:module-resolver");
/**
 * This class aim to resolve textlint's package name and get the module path.
 *
 * Define
 *
 * - `package` is npm package
 * - `module` is package's main module
 *
 * ## Support
 *
 * - textlint-rule-*
 * - textlint-preset-*
 * - textlint-plugin-*
 * - textlint-config-*
 */
var TextLintModuleResolver = /** @class */ (function () {
    function TextLintModuleResolver(config) {
        /**
         * @type {string} baseDirectory for resolving
         */
        this.baseDirectory = config && config.rulesBaseDirectory ? config.rulesBaseDirectory : "";
    }
    /**
     * Take package name, and return path to module.
     * @param {string} packageName
     * @returns {string} return path to module
     */
    TextLintModuleResolver.prototype.resolveRulePackageName = function (packageName) {
        var baseDir = this.baseDirectory;
        var fullPackageName = createFullPackageName(PackageNamePrefix.rule, packageName);
        // <rule-name> or textlint-rule-<rule-name>
        var pkgPath = tryResolve(path.join(baseDir, fullPackageName)) || tryResolve(path.join(baseDir, packageName));
        if (!pkgPath) {
            debug("rule fullPackageName: " + fullPackageName);
            throw new ReferenceError("Failed to load textlint's rule module: \"" + packageName + "\" is not found.\nSee FAQ: https://github.com/textlint/textlint/blob/master/docs/faq/failed-to-load-textlints-module.md\n");
        }
        return pkgPath;
    };
    /**
     * Take package name, and return path to module.
     * @param {string} packageName
     * @returns {string} return path to module
     */
    TextLintModuleResolver.prototype.resolveFilterRulePackageName = function (packageName) {
        var baseDir = this.baseDirectory;
        var fullPackageName = createFullPackageName(PackageNamePrefix.filterRule, packageName);
        // <rule-name> or textlint-filter-rule-<rule-name> or @scope/<rule-name>
        var pkgPath = tryResolve(path.join(baseDir, fullPackageName)) || tryResolve(path.join(baseDir, packageName));
        if (!pkgPath) {
            debug("filter rule fullPackageName: " + fullPackageName);
            throw new ReferenceError("Failed to load textlint's filter rule module: \"" + packageName + "\" is not found.\nSee FAQ: https://github.com/textlint/textlint/blob/master/docs/faq/failed-to-load-textlints-module.md\n");
        }
        return pkgPath;
    };
    /**
     * Take package name, and return path to module.
     * @param {string} packageName
     * @returns {string} return path to module
     */
    TextLintModuleResolver.prototype.resolvePluginPackageName = function (packageName) {
        var baseDir = this.baseDirectory;
        var fullPackageName = createFullPackageName(PackageNamePrefix.plugin, packageName);
        // <plugin-name> or textlint-plugin-<rule-name>
        var pkgPath = tryResolve(path.join(baseDir, fullPackageName)) || tryResolve(path.join(baseDir, packageName));
        if (!pkgPath) {
            debug("plugin fullPackageName: " + fullPackageName);
            throw new ReferenceError("Failed to load textlint's plugin module: \"" + packageName + "\" is not found.\nSee FAQ: https://github.com/textlint/textlint/blob/master/docs/faq/failed-to-load-textlints-module.md\n");
        }
        return pkgPath;
    };
    /**
     * Take package name, and return path to module.
     * @param {string} packageName
     * The user must specify preset- prefix to these `packageName`.
     * @returns {string} return path to module
     */
    TextLintModuleResolver.prototype.resolvePresetPackageName = function (packageName) {
        var baseDir = this.baseDirectory;
        var PREFIX = PackageNamePrefix.rulePreset;
        /* Implementation Note

        preset name is defined in config file:
        In the case, `packageName` is "preset-gizmo"
        TextLintModuleResolver resolve "preset-gizmo" to "textlint-rule-preset-gizmo"
        {
            "rules": {
                "preset-gizmo": {
                    "ruleA": false
                }
            }
        }
         */
        // preset-<name> or textlint-rule-preset-<name>
        // @scope/preset-<name> or @scope/textlint-rule-preset-<name>
        var packageNameWithoutPreset = packageName
            .replace(/^preset-/, "")
            .replace(/^@([^/]+)\/preset-(.*)$/, "@$1/$2");
        var fullPackageName = createFullPackageName(PREFIX, packageNameWithoutPreset);
        var fullFullPackageName = "" + PREFIX + packageNameWithoutPreset;
        var pkgPath = 
        // textlint-rule-preset-<preset-name> or @scope/textlint-rule-preset-<preset-name>
        tryResolve(path.join(baseDir, fullFullPackageName)) ||
            // <preset-name>
            tryResolve(path.join(baseDir, packageNameWithoutPreset)) ||
            // <rule-name>
            tryResolve(path.join(baseDir, fullPackageName)) ||
            // <package-name>
            tryResolve(path.join(baseDir, packageName));
        if (!pkgPath) {
            debug("preset fullPackageName: " + fullPackageName);
            debug("preset fullFullPackageName: " + fullFullPackageName);
            throw new ReferenceError("Failed to load textlint's preset module: \"" + packageName + "\" is not found.\nSee FAQ: https://github.com/textlint/textlint/blob/master/docs/faq/failed-to-load-textlints-module.md\n");
        }
        return pkgPath;
    };
    /**
     * Take Config package name, and return path to module.
     * @param {string} packageName
     * @returns {string} return path to module
     */
    TextLintModuleResolver.prototype.resolveConfigPackageName = function (packageName) {
        var baseDir = this.baseDirectory;
        var fullPackageName = createFullPackageName(PackageNamePrefix.config, packageName);
        // <plugin-name> or textlint-config-<rule-name>
        var pkgPath = tryResolve(path.join(baseDir, fullPackageName)) || tryResolve(path.join(baseDir, packageName));
        if (!pkgPath) {
            throw new ReferenceError("Failed to load textlint's config module: \"" + packageName + "\" is not found.\nSee FAQ: https://github.com/textlint/textlint/blob/master/docs/faq/failed-to-load-textlints-module.md\n");
        }
        return pkgPath;
    };
    return TextLintModuleResolver;
}());
export { TextLintModuleResolver };
//# sourceMappingURL=textlint-module-resolver.js.map