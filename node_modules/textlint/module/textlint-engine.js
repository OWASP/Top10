"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { createFormatter } from "@textlint/linter-formatter";
import { AbstractTextLintEngine } from "./engine/textlint-engine-core";
/**
 * TextLintEngine a adapter for TextLintEngineCore.
 * It aim to pull the whole look together. (TextLintEngine and TextFixEngine)
 */
var TextLintEngine = /** @class */ (function (_super) {
    __extends(TextLintEngine, _super);
    function TextLintEngine() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * @param {TextLintCore} textlintCore
         * @returns {function()}
         */
        _this.onFile = function (textlintCore) {
            /**
             * Executes the current configuration on an array of file and directory names.
             * TextLintEngine#executeOnFile
             * @param {String} file An array of file and directory names.
             * @returns {TextlintResult[]} The results for all files that were linted.
             */
            return function executeOnFile(file) {
                return textlintCore.lintFile(file);
            };
        };
        /**
         * @param {TextLintCore} textlintCore
         * @returns {function()}
         */
        _this.onText = function (textlintCore) {
            /**
             * lint text, and return TextlintResult[]
             * TextLintEngine#executeOnText
             * @param {string} text linting text content
             * @param {string} ext ext is a type for linting. default: ".txt"
             * @returns {TextlintResult[]}
             */
            return function executeOnText(text, ext) {
                return textlintCore.lintText(text, ext);
            };
        };
        /**
         * @param {TextLintFormatterOption} formatterConfig
         */
        _this.onFormat = function (formatterConfig) {
            return createFormatter(formatterConfig);
        };
        return _this;
    }
    return TextLintEngine;
}(AbstractTextLintEngine));
export { TextLintEngine };
//# sourceMappingURL=textlint-engine.js.map