// LICENSE : MIT
"use strict";

function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
    } else {
        obj[key] = value;
    }
    return obj;
}

var execall = require("execall");
var escapeStringRegexp = require("escape-string-regexp");
var defaultOptions = {
    // white list
    // string or RegExp string
    // e.g.
    // "string"
    // "/\\d+/"
    allow: []
};
module.exports = function(context, options) {
    var Syntax = context.Syntax;
    var shouldIgnore = context.shouldIgnore;
    var getSource = context.getSource;

    var allowWords = options.allow || defaultOptions.allow;
    var regExpWhiteList = allowWords.map(function(allowWord) {
        if (!allowWord) {
            return /^$/;
        }
        if (allowWord[0] === "/" && allowWord[allowWord.length - 1] === "/") {
            var regExpString = allowWord.slice(1, allowWord.length - 1);
            return new RegExp(regExpString, "g");
        }
        var escapeString = escapeStringRegexp(allowWord);
        return new RegExp(escapeString, "g");
    });
    return _defineProperty({}, Syntax.Document, function(node) {
        var text = getSource(node);
        regExpWhiteList.forEach(function(whiteRegExp) {
            var matches = execall(whiteRegExp, text);
            matches.forEach(function(match) {
                var lastIndex = match.index + match.match.length;
                shouldIgnore([match.index, lastIndex]);
            });
        });
    });
};
//# sourceMappingURL=textlint-rule-filter-whitelist.js.map
