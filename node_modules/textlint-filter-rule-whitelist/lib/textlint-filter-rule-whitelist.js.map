{"version":3,"sources":["../src/textlint-filter-rule-whitelist.js"],"names":["path","require","rcfile","getConfigBaseDir","matchPatterns","getAllowWordsFromFiles","files","baseDirectory","results","forEach","contents","configFileName","resolve","filePath","Array","isArray","config","concat","Error","defaultOptions","allow","whitelistConfigPaths","module","exports","context","options","Syntax","shouldIgnore","getSource","process","cwd","allowWords","allAllowWords","Document","node","text","matchResults","result","startIndex","endIndex"],"mappings":"AAAA;AACA;;;;AACA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,SAASD,QAAQ,kBAAR,CAAf;;eAC6BA,QAAQ,+BAAR,C;IAArBE,gB,YAAAA,gB;;gBACkBF,QAAQ,iCAAR,C;IAAlBG,a,aAAAA,a;;AACR,IAAMC,yBAAyB,SAAzBA,sBAAyB,CAACC,KAAD,EAAQC,aAAR,EAA0B;AACrD,QAAIC,UAAU,EAAd;AACAF,UAAMG,OAAN,CAAc,oBAAY;AACtB;AACA,YAAMC,WAAWR,OAAO,MAAP,EAAe;AAC5BS,4BAAgBX,KAAKY,OAAL,CAAaL,aAAb,EAA4BM,QAA5B;AADY,SAAf,CAAjB;AAGA,YAAIH,YAAYI,MAAMC,OAAN,CAAcL,SAASM,MAAvB,CAAhB,EAAgD;AAC5CR,sBAAUA,QAAQS,MAAR,CAAeP,SAASM,MAAxB,CAAV;AACH,SAFD,MAEO;AACH,kBAAM,IAAIE,KAAJ,8CAAqDL,QAArD,CAAN;AACH;AACJ,KAVD;AAWA,WAAOL,OAAP;AACH,CAdD;;AAgBA,IAAMW,iBAAiB;AACnB;;;;;;;;;AASAC,WAAO,EAVY;AAWnB;;;AAGAC,0BAAsB;AAdH,CAAvB;AAgBAC,OAAOC,OAAP,GAAiB,UAASC,OAAT,EAAkBC,OAAlB,EAA2B;AAAA,QAChCC,MADgC,GACIF,OADJ,CAChCE,MADgC;AAAA,QACxBC,YADwB,GACIH,OADJ,CACxBG,YADwB;AAAA,QACVC,SADU,GACIJ,OADJ,CACVI,SADU;;AAExC,QAAMrB,gBAAgBJ,iBAAiBqB,OAAjB,KAA6BK,QAAQC,GAAR,EAAnD;AACA,QAAMC,aAAaN,QAAQL,KAAR,IAAiBD,eAAeC,KAAnD;AACA,QAAMC,uBAAuBI,QAAQJ,oBAAR,GACvBhB,uBAAuBoB,QAAQJ,oBAA/B,EAAqDd,aAArD,CADuB,GAEvB,EAFN;AAGA,QAAMyB,gBAAgBD,WAAWd,MAAX,CAAkBI,oBAAlB,CAAtB;AACA,+BACKK,OAAOO,QADZ,YACsBC,IADtB,EAC4B;AACpB,YAAMC,OAAOP,UAAUM,IAAV,CAAb;AACA,YAAME,eAAehC,cAAc+B,IAAd,EAAoBH,aAApB,CAArB;AACAI,qBAAa3B,OAAb,CAAqB,kBAAU;AAC3BkB,yBAAa,CAACU,OAAOC,UAAR,EAAoBD,OAAOE,QAA3B,CAAb;AACH,SAFD;AAGH,KAPL;AASH,CAjBD","file":"textlint-filter-rule-whitelist.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst path = require(\"path\");\nconst rcfile = require(\"rc-config-loader\");\nconst { getConfigBaseDir } = require(\"@textlint/get-config-base-dir\");\nconst { matchPatterns } = require(\"@textlint/regexp-string-matcher\");\nconst getAllowWordsFromFiles = (files, baseDirectory) => {\n    let results = [];\n    files.forEach(filePath => {\n        // TODO: use other loader\n        const contents = rcfile(\"file\", {\n            configFileName: path.resolve(baseDirectory, filePath)\n        });\n        if (contents && Array.isArray(contents.config)) {\n            results = results.concat(contents.config);\n        } else {\n            throw new Error(`This allow file is not allow word list: ${filePath}`);\n        }\n    });\n    return results;\n};\n\nconst defaultOptions = {\n    /**\n     * White list strings or RegExp-like strings\n     *\n     * [\n     *     \"string\",\n     *     \"/\\\\d+/\",\n     *     \"/^===/m\",\n     * ]\n     */\n    allow: [],\n    /**\n     * file path list that includes allow words.\n     */\n    whitelistConfigPaths: []\n};\nmodule.exports = function(context, options) {\n    const { Syntax, shouldIgnore, getSource } = context;\n    const baseDirectory = getConfigBaseDir(context) || process.cwd();\n    const allowWords = options.allow || defaultOptions.allow;\n    const whitelistConfigPaths = options.whitelistConfigPaths\n        ? getAllowWordsFromFiles(options.whitelistConfigPaths, baseDirectory)\n        : [];\n    const allAllowWords = allowWords.concat(whitelistConfigPaths);\n    return {\n        [Syntax.Document](node) {\n            const text = getSource(node);\n            const matchResults = matchPatterns(text, allAllowWords);\n            matchResults.forEach(result => {\n                shouldIgnore([result.startIndex, result.endIndex]);\n            });\n        }\n    };\n};\n"]}