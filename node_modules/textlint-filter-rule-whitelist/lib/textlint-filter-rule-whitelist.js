// LICENSE : MIT
"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var path = require("path");
var rcfile = require("rc-config-loader");

var _require = require("@textlint/get-config-base-dir"),
    getConfigBaseDir = _require.getConfigBaseDir;

var _require2 = require("@textlint/regexp-string-matcher"),
    matchPatterns = _require2.matchPatterns;

var getAllowWordsFromFiles = function getAllowWordsFromFiles(files, baseDirectory) {
    var results = [];
    files.forEach(function (filePath) {
        // TODO: use other loader
        var contents = rcfile("file", {
            configFileName: path.resolve(baseDirectory, filePath)
        });
        if (contents && Array.isArray(contents.config)) {
            results = results.concat(contents.config);
        } else {
            throw new Error("This allow file is not allow word list: " + filePath);
        }
    });
    return results;
};

var defaultOptions = {
    /**
     * White list strings or RegExp-like strings
     *
     * [
     *     "string",
     *     "/\\d+/",
     *     "/^===/m",
     * ]
     */
    allow: [],
    /**
     * file path list that includes allow words.
     */
    whitelistConfigPaths: []
};
module.exports = function (context, options) {
    var Syntax = context.Syntax,
        shouldIgnore = context.shouldIgnore,
        getSource = context.getSource;

    var baseDirectory = getConfigBaseDir(context) || process.cwd();
    var allowWords = options.allow || defaultOptions.allow;
    var whitelistConfigPaths = options.whitelistConfigPaths ? getAllowWordsFromFiles(options.whitelistConfigPaths, baseDirectory) : [];
    var allAllowWords = allowWords.concat(whitelistConfigPaths);
    return _defineProperty({}, Syntax.Document, function (node) {
        var text = getSource(node);
        var matchResults = matchPatterns(text, allAllowWords);
        matchResults.forEach(function (result) {
            shouldIgnore([result.startIndex, result.endIndex]);
        });
    });
};
//# sourceMappingURL=textlint-filter-rule-whitelist.js.map