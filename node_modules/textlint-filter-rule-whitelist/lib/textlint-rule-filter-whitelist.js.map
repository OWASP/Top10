{"version":3,"sources":["../src/textlint-rule-filter-whitelist.js"],"names":[],"mappings":"AAAA;AACA;;;;AACA,IAAM,UAAU,QAAQ,SAAR,CAAhB;AACA,IAAM,qBAAqB,QAAQ,sBAAR,CAA3B;AACA,IAAM,iBAAiB;AACnB;AACA;AACA;AACA;AACA;AACA,WAAO;AANY,CAAvB;AAQA,OAAO,OAAP,GAAiB,UAAS,OAAT,EAAkB,OAAlB,EAA2B;AAAA,QACjC,MADiC,GACE,OADF,CACjC,MADiC;AAAA,QACzB,YADyB,GACE,OADF,CACzB,YADyB;AAAA,QACX,SADW,GACE,OADF,CACX,SADW;;AAExC,QAAM,aAAa,QAAQ,KAAR,IAAiB,eAAe,KAAnD;AACA,QAAM,kBAAkB,WAAW,GAAX,CAAe,qBAAa;AAChD,YAAI,CAAC,SAAL,EAAgB;AACZ,mBAAO;AAAP;AACH;AACD,YAAI,UAAU,CAAV,MAAiB,GAAjB,IAAwB,UAAU,UAAU,MAAV,GAAmB,CAA7B,MAAoC,GAAhE,EAAqE;AACjE,gBAAM,eAAe,UAAU,KAAV,CAAgB,CAAhB,EAAmB,UAAU,MAAV,GAAmB,CAAtC,CAArB;AACA,mBAAO,IAAI,MAAJ,CAAW,YAAX,EAAyB,GAAzB,CAAP;AACH;AACD,YAAM,eAAe,mBAAmB,SAAnB,CAArB;AACA,eAAO,IAAI,MAAJ,CAAW,YAAX,EAAyB,GAAzB,CAAP;AACH,KAVuB,CAAxB;AAWA,+BACK,OAAO,QADZ,YACsB,IADtB,EAC2B;AACnB,YAAM,OAAO,UAAU,IAAV,CAAb;AACA,wBAAgB,OAAhB,CAAwB,uBAAe;AACnC,gBAAM,UAAU,QAAQ,WAAR,EAAqB,IAArB,CAAhB;AACA,oBAAQ,OAAR,CAAgB,iBAAS;AACrB,oBAAM,YAAY,MAAM,KAAN,GAAc,MAAM,KAAN,CAAY,MAA5C;AACA,6BAAa,CAAC,MAAM,KAAP,EAAc,SAAd,CAAb;AACH,aAHD;AAIH,SAND;AAOH,KAVL;AAYH,CA1BD","file":"textlint-rule-filter-whitelist.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst execall = require('execall');\nconst escapeStringRegexp = require('escape-string-regexp');\nconst defaultOptions = {\n    // white list\n    // string or RegExp string\n    // e.g.\n    // \"string\"\n    // \"/\\\\d+/\"\n    allow: []\n};\nmodule.exports = function(context, options) {\n    const {Syntax, shouldIgnore, getSource} = context;\n    const allowWords = options.allow || defaultOptions.allow;\n    const regExpWhiteList = allowWords.map(allowWord => {\n        if (!allowWord) {\n            return /^$/;\n        }\n        if (allowWord[0] === \"/\" && allowWord[allowWord.length - 1] === \"/\") {\n            const regExpString = allowWord.slice(1, allowWord.length - 1);\n            return new RegExp(regExpString, \"g\");\n        }\n        const escapeString = escapeStringRegexp(allowWord);\n        return new RegExp(escapeString, \"g\");\n    });\n    return {\n        [Syntax.Document](node){\n            const text = getSource(node);\n            regExpWhiteList.forEach(whiteRegExp => {\n                const matches = execall(whiteRegExp, text);\n                matches.forEach(match => {\n                    const lastIndex = match.index + match.match.length;\n                    shouldIgnore([match.index, lastIndex]);\n                });\n            });\n        }\n    };\n};"]}