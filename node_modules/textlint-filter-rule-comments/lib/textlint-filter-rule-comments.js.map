{"version":3,"sources":["../src/textlint-filter-rule-comments.js"],"names":[],"mappings":";AACA;;AACA;;;;AACA;;;;;;AACA,IAAM,iBAAiB;;;AAGnB,uBAAmB,iBAHA;;;AAMnB,wBAAoB;AAND,CAAvB;AAQA,OAAO,OAAP,GAAiB,UAAS,OAAT,EAA4C;AAAA;;AAAA,QAA1B,OAA0B,yDAAhB,cAAgB;AAAA,QAClD,MADkD,GACf,OADe,CAClD,MADkD;AAAA,QAC1C,YAD0C,GACf,OADe,CAC1C,YAD0C;AAAA,QAC5B,SAD4B,GACf,OADe,CAC5B,SAD4B;;;AAGzD,QAAM,kBAAkB,QAAQ,eAAR,IAA2B,eAAe,eAAlE;AACA,QAAM,mBAAmB,QAAQ,gBAAR,IAA4B,eAAe,gBAApE;;AAEA,QAAM,UAAU,WAAhB;AACA,QAAM,gBAAgB,4BAAkB,QAAQ,MAA1B,CAAtB;;AAEA,4CAkBK,OAAO,IAlBZ,YAkBkB,IAlBlB,EAkBuB;AACf,YAAM,YAAY,UAAU,IAAV,CAAlB;AACA,YAAI,CAAC,iCAAc,SAAd,CAAL,EAA+B;AAC3B;AACH;AACD,YAAM,WAAW,4CAAyB,SAAzB,CAAjB;AACA,iBAAS,OAAT,CAAiB,wBAAgB;AAC7B,gBAAI,aAAa,OAAb,CAAqB,eAArB,MAA0C,CAAC,CAA/C,EAAkD;AAC9C,oBAAM,cAAc,aAAa,OAAb,CAAqB,eAArB,EAAsC,EAAtC,CAApB;AACA,8BAAc,eAAd,CAA8B,IAA9B,EAAoC,gCAAa,WAAb,CAApC;AACH,aAHD,MAGO,IAAI,aAAa,OAAb,CAAqB,gBAArB,MAA2C,CAAC,CAAhD,EAAmD;AACtD,oBAAM,eAAc,aAAa,OAAb,CAAqB,gBAArB,EAAuC,EAAvC,CAApB;AACA,8BAAc,gBAAd,CAA+B,IAA/B,EAAqC,gCAAa,YAAb,CAArC;AACH;AACJ,SARD;AASH,KAjCL,yBAkCK,OAAO,OAlCZ,YAkCqB,IAlCrB,EAkC0B;AAClB,YAAM,eAAe,KAAK,KAAL,IAAc,EAAnC;AACA,YAAI,aAAa,OAAb,CAAqB,eAArB,MAA0C,CAAC,CAA/C,EAAkD;AAC9C,gBAAM,cAAc,aAAa,OAAb,CAAqB,eAArB,EAAsC,EAAtC,CAApB;AACA,0BAAc,eAAd,CAA8B,IAA9B,EAAoC,gCAAa,WAAb,CAApC;AACH,SAHD,MAGO,IAAI,aAAa,OAAb,CAAqB,gBAArB,MAA2C,CAAC,CAAhD,EAAmD;AACtD,gBAAM,gBAAc,aAAa,OAAb,CAAqB,gBAArB,EAAuC,EAAvC,CAApB;AACA,0BAAc,gBAAd,CAA+B,IAA/B,EAAqC,gCAAa,aAAb,CAArC;AACH;AACJ,KA3CL,yBA4CQ,OAAO,QA5Cf,iCA4CiC;AACzB,YAAM,mBAAmB,cAAc,mBAAd,EAAzB;AACA,yBAAiB,OAAjB,CAAyB,mBAAW;AAChC,gBAAM,QAAQ,CAAC,QAAQ,UAAT,EAAqB,QAAQ,QAA7B,CAAd;AACA,yBAAa,KAAb,EAAoB;AAChB,wBAAQ,QAAQ,MAAR,IAAkB;AADV,aAApB;AAGH,SALD;AAMH,KApDL;AAsDH,CA/DD","file":"textlint-filter-rule-comments.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport StatusManager from \"./StatusManager\";\nimport {parseRuleIds, getValuesFromHTMLComment, isHTMLComment} from \"./parse-comment\";\nconst defaultOptions = {\n    // enable comment directive\n    // if comment has the value, then enable textlint rule\n    \"enablingComment\": \"textlint-enable\",\n    // disable comment directive\n    // if comment has the value, then disable textlint rule\n    \"disablingComment\": \"textlint-disable\"\n};\nmodule.exports = function(context, options = defaultOptions) {\n    const {Syntax, shouldIgnore, getSource} = context;\n\n    const enablingComment = options.enablingComment || defaultOptions.enablingComment;\n    const disablingComment = options.disablingComment || defaultOptions.disablingComment;\n\n    const content = getSource();\n    const statusManager = new StatusManager(content.length);\n    // Get comment value\n    return {\n        /*\n\nThis is wrong format.\nhttps://github.com/wooorm/remark treat as one html block.        \n\n<!-- textlint-disable -->\nThis is ignored.\n<!-- textlint-enable -->\n\nshould be\n\n<!-- textlint-disable -->\n\nThis is ignored.\n\n<!-- textlint-enable -->\n         */\n        [Syntax.Html](node){\n            const nodeValue = getSource(node);\n            if (!isHTMLComment(nodeValue)) {\n                return;\n            }\n            const comments = getValuesFromHTMLComment(nodeValue);\n            comments.forEach(commentValue => {\n                if (commentValue.indexOf(enablingComment) !== -1) {\n                    const configValue = commentValue.replace(enablingComment, \"\");\n                    statusManager.enableReporting(node, parseRuleIds(configValue));\n                } else if (commentValue.indexOf(disablingComment) !== -1) {\n                    const configValue = commentValue.replace(disablingComment, \"\");\n                    statusManager.disableReporting(node, parseRuleIds(configValue));\n                }\n            });\n        },\n        [Syntax.Comment](node){\n            const commentValue = node.value || \"\";\n            if (commentValue.indexOf(enablingComment) !== -1) {\n                const configValue = commentValue.replace(enablingComment, \"\");\n                statusManager.enableReporting(node, parseRuleIds(configValue));\n            } else if (commentValue.indexOf(disablingComment) !== -1) {\n                const configValue = commentValue.replace(disablingComment, \"\");\n                statusManager.disableReporting(node, parseRuleIds(configValue));\n            }\n        },\n        [`${Syntax.Document}:exit`](){\n            const ignoringMessages = statusManager.getIgnoringMessages();\n            ignoringMessages.forEach(message => {\n                const range = [message.startIndex, message.endIndex];\n                shouldIgnore(range, {\n                    ruleId: message.ruleId || \"*\"\n                });\n            })\n        }\n    }\n};"]}