// LICENSE : MIT
"use strict";
// constants

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NanSymbolMark = {};

function encodeKey(key) {
    var isNotNumber = typeof key === "number" && key !== key;
    return isNotNumber ? NanSymbolMark : key;
}

function decodeKey(encodedKey) {
    return encodedKey === NanSymbolMark ? NaN : encodedKey;
}

/**
 * ES6 Map like object.
 * See [Map - JavaScript | MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map "Map - JavaScript | MDN")
 */

var MapLike = exports.MapLike = function () {
    function MapLike() {
        var _this = this;

        var entries = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

        _classCallCheck(this, MapLike);

        /**
         * @type {Array}
         * @private
         */
        this._keys = [];
        /**
         *
         * @type {Array}
         * @private
         */
        this._values = [];
        entries.forEach(function (entry) {
            if (!Array.isArray(entry)) {
                throw new Error("should be `new MapLike([ [key, value] ])`");
            }
            if (entry.length !== 2) {
                throw new Error("should be `new MapLike([ [key, value] ])`");
            }
            _this.set(entry[0], entry[1]);
        });
    }

    /**
     * return map size
     * @returns {Number}
     */


    _createClass(MapLike, [{
        key: "entries",


        /**
         * entries [[key, value], [key, value]] value
         * @returns {Array}
         */
        value: function entries() {
            var _this2 = this;

            return this.keys().map(function (key) {
                var value = _this2.get(key);
                return [decodeKey(key), value];
            });
        }

        /**
         * get keys
         * @returns {Array}
         */

    }, {
        key: "keys",
        value: function keys() {
            return this._keys.filter(function (value) {
                return value !== undefined;
            }).map(decodeKey);
        }

        /**
         * get values
         * @returns {Array}
         */

    }, {
        key: "values",
        value: function values() {
            return this._values.slice();
        }

        /**
         * @param {*} key - The key of the element to return from the Map object.
         * @returns {*}
         */

    }, {
        key: "get",
        value: function get(key) {
            var idx = this._keys.indexOf(encodeKey(key));
            return idx !== -1 ? this._values[idx] : undefined;
        }

        /**
         * has value of key
         * @param {*} key - The key of the element to return from the Map object.
         * @returns {boolean}
         */

    }, {
        key: "has",
        value: function has(key) {
            return this._keys.indexOf(encodeKey(key)) !== -1;
        }

        /**
         * set value for key
         * @param {*} key - The key of the element to return from the Map object.
         * @param {*} value
         * @return {MapLike}
         */

    }, {
        key: "set",
        value: function set(key, value) {
            var idx = this._keys.indexOf(encodeKey(key));
            if (idx !== -1) {
                this._values[idx] = value;
            } else {
                this._keys.push(encodeKey(key));
                this._values.push(value);
            }
            return this;
        }

        /**
         * delete value for key
         * @param {*} key - The key of the element to return from the Map object.
         * @returns {boolean}
         */

    }, {
        key: "delete",
        value: function _delete(key) {
            var idx = this._keys.indexOf(encodeKey(key));
            if (idx === -1) {
                return false;
            }
            this._keys.splice(idx, 1);
            this._values.splice(idx, 1);
            return true;
        }

        /**
         * clear defined key,value
         * @returns {MapLike}
         */

    }, {
        key: "clear",
        value: function clear() {
            this._keys = [];
            this._values = [];
            return this;
        }

        /**
         * forEach map
         * @param {function(value, key, map)} handler
         * @param {*} [thisArg]
         */

    }, {
        key: "forEach",
        value: function forEach(handler, thisArg) {
            var _this3 = this;

            this.keys().forEach(function (key) {
                // value, key, map
                handler(_this3.get(key), key, thisArg || _this3);
            });
        }
    }, {
        key: "size",
        get: function get() {
            return this._values.filter(function (value) {
                return value !== undefined;
            }).length;
        }
    }]);

    return MapLike;
}();
//# sourceMappingURL=MapLike.js.map