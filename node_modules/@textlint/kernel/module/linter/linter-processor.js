// LICENSE : MIT
"use strict";
import * as assert from "assert";
import LinterTask from "../task/linter-task";
import TaskRunner from "../task/task-runner";
var LinterProcessor = /** @class */ (function () {
    /**
     * @param {Processor} processor
     * @param {MessageProcessManager} messageProcessManager
     */
    function LinterProcessor(processor, messageProcessManager) {
        this.processor = processor;
        this.messageProcessManager = messageProcessManager;
    }
    /**
     * Run linter process
     */
    LinterProcessor.prototype.process = function (_a) {
        var _this = this;
        var config = _a.config, configBaseDir = _a.configBaseDir, ruleDescriptors = _a.ruleDescriptors, filterRuleDescriptors = _a.filterRuleDescriptors, sourceCode = _a.sourceCode;
        var _b = this.processor.processor(sourceCode.ext), preProcess = _b.preProcess, postProcess = _b.postProcess;
        assert.ok(typeof preProcess === "function" && typeof postProcess === "function", "processor should implement {preProcess, postProcess}");
        var task = new LinterTask({
            config: config,
            ruleDescriptors: ruleDescriptors,
            filterRuleDescriptors: filterRuleDescriptors,
            sourceCode: sourceCode,
            configBaseDir: configBaseDir
        });
        return TaskRunner.process(task).then(function (messages) {
            var result = postProcess(messages, sourceCode.filePath);
            result.messages = _this.messageProcessManager.process(result.messages);
            if (result.filePath == null) {
                result.filePath = "<Unkown" + sourceCode.ext + ">";
            }
            assert.ok(result.filePath && result.messages.length >= 0, "postProcess should return { messages, filePath } ");
            return result;
        });
    };
    return LinterProcessor;
}());
export default LinterProcessor;
//# sourceMappingURL=linter-processor.js.map