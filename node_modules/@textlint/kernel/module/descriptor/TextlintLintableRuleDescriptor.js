// LICENSE : MIT
"use strict";
import { assertRuleShape, getLinter } from "./rule-creator-helper";
import deepEqual from "deep-equal";
/**
 * Textlint Rule Descriptor.
 * It handle RuleCreator and RuleOption.
 */
var TextlintLintableRuleDescriptor = /** @class */ (function () {
    function TextlintLintableRuleDescriptor(textlintKernelRule) {
        this.textlintKernelRule = textlintKernelRule;
        assertRuleShape(textlintKernelRule.rule, textlintKernelRule.ruleId);
    }
    Object.defineProperty(TextlintLintableRuleDescriptor.prototype, "id", {
        get: function () {
            return this.textlintKernelRule.ruleId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextlintLintableRuleDescriptor.prototype, "rule", {
        /**
         * Rule module-self
         */
        get: function () {
            return this.textlintKernelRule.rule;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextlintLintableRuleDescriptor.prototype, "enabled", {
        /**
         * Return true if this rule is enabled.
         */
        get: function () {
            return this.rawOptions !== false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextlintLintableRuleDescriptor.prototype, "linter", {
        /**
         * Return linter function
         * You should check hasLiner before call this.
         */
        get: function () {
            return getLinter(this.rule);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextlintLintableRuleDescriptor.prototype, "normalizedOptions", {
        /**
         * Return normalized rule option object.
         * If the rule have not option, return `true` by default.
         */
        get: function () {
            // default: { ruleName: true }
            var DefaultRuleConfigValue = {};
            if (typeof this.textlintKernelRule.options === "boolean" || this.textlintKernelRule.options === undefined) {
                return DefaultRuleConfigValue;
            }
            else {
                return this.textlintKernelRule.options;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextlintLintableRuleDescriptor.prototype, "rawOptions", {
        get: function () {
            return this.textlintKernelRule.options;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Return true if descriptor is same
     */
    TextlintLintableRuleDescriptor.prototype.equals = function (descriptor) {
        return (this.rule === descriptor.rule &&
            deepEqual(this.normalizedOptions, descriptor.normalizedOptions, {
                strict: true
            }));
    };
    TextlintLintableRuleDescriptor.prototype.toKernel = function () {
        return this.textlintKernelRule;
    };
    return TextlintLintableRuleDescriptor;
}());
export { TextlintLintableRuleDescriptor };
//# sourceMappingURL=TextlintLintableRuleDescriptor.js.map