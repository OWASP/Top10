var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { createTextlintFilterRuleDescriptors, createTextlintPluginDescriptors, createTextlintRuleDescriptors } from "./DescriptorsFactory";
var TextlintKernelDescriptor = /** @class */ (function () {
    function TextlintKernelDescriptor(args) {
        this.args = args;
        this.rule = createTextlintRuleDescriptors(args.rules);
        this.filterRule = createTextlintFilterRuleDescriptors(args.filterRules);
        this.plugin = createTextlintPluginDescriptors(args.plugins);
    }
    Object.defineProperty(TextlintKernelDescriptor.prototype, "availableExtensions", {
        /**
         * Return available extensions of plugins
         */
        get: function () {
            return this.plugin.availableExtensions;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Merge constructor args and partialArgs
     * It shallow merge partialArgs.
     * It means that overwrite root properties by partialArgs.
     */
    TextlintKernelDescriptor.prototype.shallowMerge = function (partialArgs) {
        return new TextlintKernelDescriptor(__assign(__assign({}, this.args), partialArgs));
    };
    /**
     * find PluginDescriptor with extension.
     * This is forward match.
     *
     * If following config of textlint, this method prefer to select MarkdownA for markdown.
     *
     * {
     *     "plugins": [MarkdownA, MarkdownB]
     * }
     */
    TextlintKernelDescriptor.prototype.findPluginDescriptorWithExt = function (ext) {
        return this.plugin.findPluginDescriptorWithExt(ext);
    };
    return TextlintKernelDescriptor;
}());
export { TextlintKernelDescriptor };
//# sourceMappingURL=TextlintKernelDescriptor.js.map