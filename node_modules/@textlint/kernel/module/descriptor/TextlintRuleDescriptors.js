// LICENSE : MIT
"use strict";
import { TextlintLintableRuleDescriptor } from "./TextlintLintableRuleDescriptor";
import { filterDuplicateDescriptor } from "./DescriptorUtil";
import { TextlintFixableRuleDescriptor } from "./TextlintFixableRuleDescriptor";
/**
 * The collection class of TextlintRuleDescriptor
 */
var TextlintRuleDescriptors = /** @class */ (function () {
    function TextlintRuleDescriptors(ruleDescriptorList) {
        if (ruleDescriptorList === void 0) { ruleDescriptorList = []; }
        this.ruleDescriptorList = ruleDescriptorList;
    }
    /**
     * Convert this to TextlintKernel rules format
     * @returns {Array}
     */
    TextlintRuleDescriptors.prototype.toKernelRulesFormat = function () {
        return this.withoutDuplicated().lintableDescriptors.map(function (descriptor) {
            return descriptor.toKernel();
        });
    };
    Object.defineProperty(TextlintRuleDescriptors.prototype, "lintableDescriptors", {
        /**
         * Return enabled lintable descriptors
         */
        get: function () {
            return this.descriptors.filter(function (descriptor) {
                // fixable is also lintable
                return descriptor instanceof TextlintLintableRuleDescriptor;
            });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextlintRuleDescriptors.prototype, "fixableDescriptors", {
        /**
         * Return enabled fixable descriptors
         */
        get: function () {
            return this.descriptors.filter(function (descriptor) {
                return descriptor instanceof TextlintFixableRuleDescriptor;
            });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextlintRuleDescriptors.prototype, "descriptors", {
        /**
         * Return enabled descriptors
         */
        get: function () {
            return this.ruleDescriptorList.filter(function (descriptor) { return descriptor.enabled; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextlintRuleDescriptors.prototype, "allDescriptors", {
        /**
         * Return all descriptors that include disabled descriptors
         */
        get: function () {
            return this.ruleDescriptorList;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * filter duplicated descriptors
     */
    TextlintRuleDescriptors.prototype.withoutDuplicated = function () {
        var newDescriptorList = filterDuplicateDescriptor(this.ruleDescriptorList);
        return new TextlintRuleDescriptors(newDescriptorList);
    };
    return TextlintRuleDescriptors;
}());
export { TextlintRuleDescriptors };
//# sourceMappingURL=TextlintRuleDescriptors.js.map