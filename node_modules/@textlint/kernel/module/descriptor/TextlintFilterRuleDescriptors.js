// LICENSE : MIT
"use strict";
import { filterDuplicateDescriptor } from "./DescriptorUtil";
/**
 * The collection class of TextlintFilterRuleDescriptor
 */
var TextlintFilterRuleDescriptors = /** @class */ (function () {
    function TextlintFilterRuleDescriptors(ruleDescriptorList) {
        if (ruleDescriptorList === void 0) { ruleDescriptorList = []; }
        this.ruleDescriptorList = ruleDescriptorList;
    }
    /**
     * Convert this to TextlintKernel rules format
     * @returns {Array}
     */
    TextlintFilterRuleDescriptors.prototype.toKernelFilterRulesFormat = function () {
        return this.withoutDuplicated().descriptors.map(function (descriptor) {
            return descriptor.toKernel();
        });
    };
    Object.defineProperty(TextlintFilterRuleDescriptors.prototype, "descriptors", {
        /**
         * Return enabled descriptors
         */
        get: function () {
            return this.ruleDescriptorList.filter(function (descriptor) {
                return descriptor.enabled;
            });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextlintFilterRuleDescriptors.prototype, "allDescriptors", {
        /**
         * Return all descriptors that include disabled descriptors
         */
        get: function () {
            return this.ruleDescriptorList;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * filter duplicated descriptors
     */
    TextlintFilterRuleDescriptors.prototype.withoutDuplicated = function () {
        // remove last duplicated item
        var newDescriptorList = filterDuplicateDescriptor(this.ruleDescriptorList);
        return new TextlintFilterRuleDescriptors(newDescriptorList);
    };
    return TextlintFilterRuleDescriptors;
}());
export { TextlintFilterRuleDescriptors };
//# sourceMappingURL=TextlintFilterRuleDescriptors.js.map