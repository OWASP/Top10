import * as assert from "assert";
import { TextlintRuleErrorImpl } from "./TextlintRuleErrorImpl";
var TextlintFilterRuleContextImpl = /** @class */ (function () {
    function TextlintFilterRuleContextImpl(args) {
        var _this = this;
        this.shouldIgnore = function (range, optional) {
            if (optional === void 0) { optional = {}; }
            assert.ok(Array.isArray(range) && typeof range[0] === "number" && typeof range[1] === "number", "shouldIgnore([number, number]); accept range.");
            _this._ignoreReport({ ruleId: _this._ruleId, range: range, optional: optional });
        };
        /**
         * get file path current processing.
         */
        this.getFilePath = function () {
            return _this._sourceCode.getFilePath();
        };
        /**
         * Gets the source code for the given node.
         * @param {TxtNode=} node The AST node to get the text for.
         * @param {int=} beforeCount The number of characters before the node to retrieve.
         * @param {int=} afterCount The number of characters after the node to retrieve.
         * @returns {string} The text representing the AST node.
         */
        this.getSource = function (node, beforeCount, afterCount) {
            return _this._sourceCode.getSource(node, beforeCount, afterCount);
        };
        /**
         * get config base directory path
         * config base directory path often is the place of .textlintrc
         *
         * e.g.) /path/to/dir/.textlintrc
         * `getConfigBaseDir()` return `"/path/to/dir/"`.
         *
         * When using textlint as module, it is specified by `configBaseDir`
         * If not found the value, return undefined.
         *
         * You can use it for resolving relative path from config dir.
         * @returns {string|undefined}
         */
        this.getConfigBaseDir = function () {
            return _this._configBaseDir;
        };
        this._ruleId = args.ruleId;
        this._sourceCode = args.sourceCode;
        this._ignoreReport = args.ignoreReport;
        this._configBaseDir = args.configBaseDir;
        this._severityLevel = args.severityLevel;
        Object.freeze(this);
    }
    Object.defineProperty(TextlintFilterRuleContextImpl.prototype, "id", {
        /**
         * Rule id
         * @returns {string}
         */
        get: function () {
            return this._ruleId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextlintFilterRuleContextImpl.prototype, "severity", {
        get: function () {
            return this._severityLevel;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextlintFilterRuleContextImpl.prototype, "Syntax", {
        /**
         * Node's type values
         * @type {TextLintNodeType}
         */
        get: function () {
            return this._sourceCode.getSyntax();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextlintFilterRuleContextImpl.prototype, "RuleError", {
        /**
         * CustomError object
         * @type {RuleError}
         */
        get: function () {
            return TextlintRuleErrorImpl;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextlintFilterRuleContextImpl.prototype, "report", {
        /**
         * Not use
         * @returns {() => void}
         */
        get: function () {
            return function () {
                throw new Error("Filter rule can not report");
            };
        },
        enumerable: false,
        configurable: true
    });
    return TextlintFilterRuleContextImpl;
}());
export { TextlintFilterRuleContextImpl };
//# sourceMappingURL=TextlintFilterRuleContextImpl.js.map