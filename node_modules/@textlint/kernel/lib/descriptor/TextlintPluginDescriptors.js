"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextlintPluginDescriptors = void 0;
var DescriptorUtil_1 = require("./DescriptorUtil");
/**
 * Collection class of TextlintPluginDescriptor
 */
var TextlintPluginDescriptors = /** @class */ (function () {
    function TextlintPluginDescriptors(pluginDescriptorList) {
        if (pluginDescriptorList === void 0) { pluginDescriptorList = []; }
        this.pluginDescriptorList = pluginDescriptorList;
    }
    Object.defineProperty(TextlintPluginDescriptors.prototype, "descriptors", {
        /**
         * Return enabled descriptors
         */
        get: function () {
            return this.pluginDescriptorList.filter(function (descriptor) {
                return descriptor.enabled;
            });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextlintPluginDescriptors.prototype, "allDescriptors", {
        /**
         * Return all descriptors that include disabled descriptors
         */
        get: function () {
            return this.pluginDescriptorList;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextlintPluginDescriptors.prototype, "availableExtensions", {
        /**
         * Return available extensions
         * It is not includes disabled plugin's extensions.
         */
        get: function () {
            return this.descriptors.reduce(function (extensions, descriptor) {
                return extensions.concat(descriptor.availableExtensions);
            }, []);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * find PluginDescriptor with extension.
     * This is forward match.
     */
    TextlintPluginDescriptors.prototype.findPluginDescriptorWithExt = function (ext) {
        return this.descriptors.find(function (descriptor) {
            return descriptor.availableExtensions.includes(ext);
        });
    };
    /**
     * filter duplicated descriptors
     */
    TextlintPluginDescriptors.prototype.withoutDuplicated = function () {
        var newDescriptorList = DescriptorUtil_1.filterDuplicateDescriptor(this.pluginDescriptorList);
        return new TextlintPluginDescriptors(newDescriptorList);
    };
    /**
     * Convert this to TextlintKernel rules format
     * @returns {Array}
     */
    TextlintPluginDescriptors.prototype.toKernelPluginsFormat = function () {
        return this.descriptors.map(function (descriptor) {
            return descriptor.toKernel();
        });
    };
    return TextlintPluginDescriptors;
}());
exports.TextlintPluginDescriptors = TextlintPluginDescriptors;
//# sourceMappingURL=TextlintPluginDescriptors.js.map