"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextlintPluginDescriptor = void 0;
var deep_equal_1 = __importDefault(require("deep-equal"));
/**
 * Get instance/static `availableExtensions()` from TextlintPluginProcessor
 */
var getAvailableExtensions = function (pluginProcessor) {
    if (typeof pluginProcessor.availableExtensions === "function") {
        return pluginProcessor.availableExtensions();
    }
    // It is compatible for textlint@10<=
    // Recommended: `availableExtensions()` should be defined as instance method.
    // https://github.com/textlint/textlint/issues/531
    var PluginProcessorConstructor = pluginProcessor.constructor;
    if (typeof PluginProcessorConstructor.availableExtensions === "function") {
        return PluginProcessorConstructor.availableExtensions();
    }
    throw new Error("Plugin(" + pluginProcessor + ") should implement availableExtensions() method");
};
/**
 * Textlint Plugin Descriptor
 */
var TextlintPluginDescriptor = /** @class */ (function () {
    function TextlintPluginDescriptor(plugin) {
        this.plugin = plugin;
        this.plugin = plugin;
        if (!this.plugin.plugin.Processor) {
            throw new Error("Plugin should have Processor property.\nmodule.exports = {\n  Processor: class Processor{ ... }\n}\n");
        }
        this.processor = new plugin.plugin.Processor(this.normalizedOptions);
    }
    Object.defineProperty(TextlintPluginDescriptor.prototype, "id", {
        get: function () {
            return this.plugin.pluginId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextlintPluginDescriptor.prototype, "enabled", {
        /**
         * Return true if this rule is enabled.
         */
        get: function () {
            return this.rawOptions !== false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextlintPluginDescriptor.prototype, "availableExtensions", {
        /**
         * Return available extension of this plugin
         */
        get: function () {
            return getAvailableExtensions(this.processor);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextlintPluginDescriptor.prototype, "normalizedOptions", {
        get: function () {
            // default: { ruleName: true }
            var DefaultPluginOption = {};
            if (typeof this.plugin.options === "boolean" || this.plugin.options === undefined) {
                return DefaultPluginOption;
            }
            else {
                return this.plugin.options;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextlintPluginDescriptor.prototype, "rawOptions", {
        get: function () {
            return this.plugin.options;
        },
        enumerable: false,
        configurable: true
    });
    TextlintPluginDescriptor.prototype.toKernel = function () {
        return this.plugin;
    };
    TextlintPluginDescriptor.prototype.equals = function (target) {
        return (this.plugin.plugin === target.plugin.plugin &&
            deep_equal_1.default(this.plugin.options, target.plugin.options, {
                strict: true
            }));
    };
    return TextlintPluginDescriptor;
}());
exports.TextlintPluginDescriptor = TextlintPluginDescriptor;
//# sourceMappingURL=TextlintPluginDescriptor.js.map