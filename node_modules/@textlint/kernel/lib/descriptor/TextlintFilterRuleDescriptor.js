// LICENSE : MIT
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextlintFilterRuleDescriptor = void 0;
var rule_creator_helper_1 = require("./rule-creator-helper");
var deep_equal_1 = __importDefault(require("deep-equal"));
/**
 * Textlint Rule Descriptor.
 * It handle RuleCreator and RuleOption.
 */
var TextlintFilterRuleDescriptor = /** @class */ (function () {
    function TextlintFilterRuleDescriptor(kernelFilterRule) {
        this.kernelFilterRule = kernelFilterRule;
    }
    Object.defineProperty(TextlintFilterRuleDescriptor.prototype, "id", {
        get: function () {
            return this.kernelFilterRule.ruleId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextlintFilterRuleDescriptor.prototype, "rule", {
        get: function () {
            return this.kernelFilterRule.rule;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextlintFilterRuleDescriptor.prototype, "enabled", {
        /**
         * Return true if this rule is enabled.
         */
        get: function () {
            return this.rawOptions !== false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextlintFilterRuleDescriptor.prototype, "filter", {
        /**
         * Return filter function
         * You should check hasLiner before call this.
         */
        get: function () {
            return rule_creator_helper_1.getFilter(this.rule);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextlintFilterRuleDescriptor.prototype, "normalizedOptions", {
        /**
         * Return normalized rule option object.
         * If the rule have not option, return `true` by default.
         */
        get: function () {
            // default: { ruleName: true }
            var DefaultRuleConfigValue = {};
            if (typeof this.kernelFilterRule.options === "boolean" || this.kernelFilterRule.options === undefined) {
                return DefaultRuleConfigValue;
            }
            else {
                return this.kernelFilterRule.options;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextlintFilterRuleDescriptor.prototype, "rawOptions", {
        get: function () {
            return this.kernelFilterRule.options;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Return true if descriptor is same
     */
    TextlintFilterRuleDescriptor.prototype.equals = function (descriptor) {
        return (this.rule === descriptor.rule &&
            deep_equal_1.default(this.normalizedOptions, descriptor.normalizedOptions, {
                strict: true
            }));
    };
    TextlintFilterRuleDescriptor.prototype.toKernel = function () {
        return this.kernelFilterRule;
    };
    return TextlintFilterRuleDescriptor;
}());
exports.TextlintFilterRuleDescriptor = TextlintFilterRuleDescriptor;
//# sourceMappingURL=TextlintFilterRuleDescriptor.js.map