// LICENSE : MIT
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert = __importStar(require("assert"));
var fixer_task_1 = __importDefault(require("../task/fixer-task"));
var task_runner_1 = __importDefault(require("../task/task-runner"));
var TextlintSourceCodeImpl_1 = require("../context/TextlintSourceCodeImpl");
var ast_tester_1 = require("@textlint/ast-tester");
var debug_1 = __importDefault(require("debug"));
var source_code_fixer_1 = require("@textlint/source-code-fixer");
var debug = debug_1.default("textlint:fixer-processor");
var FixerProcessor = /** @class */ (function () {
    /**
     * @param {Processor} processor
     * @param {MessageProcessManager} messageProcessManager
     */
    function FixerProcessor(processor, messageProcessManager) {
        this.processor = processor;
        this.messageProcessManager = messageProcessManager;
    }
    /**
     * Run fixer process
     * @param {Config} config
     * @param {string} [configBaseDir]
     * @param {TextlintKernelRule[]} [rules]
     * @param {TextlintKernelFilterRule[]} [filterRules]
     * @param {SourceCode} sourceCode
     * @returns {Promise.<TextlintFixResult>}
     */
    FixerProcessor.prototype.process = function (_a) {
        var _this = this;
        var config = _a.config, configBaseDir = _a.configBaseDir, ruleDescriptors = _a.ruleDescriptors, filterRules = _a.filterRules, sourceCode = _a.sourceCode;
        assert.ok(sourceCode);
        var _b = this.processor.processor(sourceCode.ext), preProcess = _b.preProcess, postProcess = _b.postProcess;
        // messages
        var resultFilePath = sourceCode.filePath;
        // applied fixing messages
        // Revert = Sequentially apply applied message to applied output
        // SourceCodeFixer.sequentiallyApplyFixes(fixedOutput, result.applyingMessages);
        var applyingMessages = [];
        // not applied fixing messages
        var remainingMessages = [];
        // original means original for applyingMessages and remainingMessages
        // pre-applyingMessages + remainingMessages
        var originalMessages = [];
        var fixerProcessList = ruleDescriptors.fixableDescriptors.map(function (ruleDescriptor) {
            return function (sourceText) {
                // create new SourceCode object
                var preProcessResult = preProcess(sourceText, sourceCode.filePath);
                var isPluginReturnAnAST = ast_tester_1.isTxtAST(preProcessResult);
                var textForAST = isPluginReturnAnAST ? sourceText : preProcessResult.text;
                var ast = isPluginReturnAnAST ? preProcessResult : preProcessResult.ast;
                var newSourceCode = new TextlintSourceCodeImpl_1.TextlintSourceCodeImpl({
                    text: textForAST,
                    ast: ast,
                    filePath: resultFilePath,
                    ext: sourceCode.ext
                });
                // create new Task
                var task = new fixer_task_1.default({
                    config: config,
                    fixableRuleDescriptor: ruleDescriptor,
                    filterRuleDescriptors: filterRules,
                    sourceCode: newSourceCode,
                    configBaseDir: configBaseDir
                });
                return task_runner_1.default.process(task).then(function (messages) {
                    var result = postProcess(messages, sourceCode.filePath);
                    var filteredResult = {
                        messages: _this.messageProcessManager.process(result.messages),
                        filePath: result.filePath ? result.filePath : "<Unkown" + sourceCode.ext + ">"
                    };
                    // TODO: should be removed resultFilePath
                    resultFilePath = filteredResult.filePath;
                    var applied = source_code_fixer_1.applyFixesToSourceCode(newSourceCode, filteredResult.messages);
                    // add messages
                    Array.prototype.push.apply(applyingMessages, applied.applyingMessages);
                    Array.prototype.push.apply(remainingMessages, applied.remainingMessages);
                    Array.prototype.push.apply(originalMessages, applied.messages);
                    // if not fixed, still use current sourceText
                    if (!applied.fixed) {
                        return sourceText;
                    }
                    // if fixed, use fixed text at next
                    return applied.output;
                });
            };
        });
        var promiseTask = fixerProcessList.reduce(function (promise, fixerProcess) {
            return promise.then(function (sourceText) {
                return fixerProcess(sourceText);
            });
        }, Promise.resolve(sourceCode.text));
        return promiseTask.then(function (output) {
            debug("Finish Processing: " + resultFilePath);
            debug("applyingMessages: " + applyingMessages.length);
            debug("remainingMessages: " + remainingMessages.length);
            return {
                filePath: resultFilePath ? resultFilePath : "<Unkown" + sourceCode.ext + ">",
                output: output,
                messages: originalMessages,
                applyingMessages: applyingMessages,
                remainingMessages: remainingMessages
            };
        });
    };
    return FixerProcessor;
}());
exports.default = FixerProcessor;
//# sourceMappingURL=fixer-processor.js.map