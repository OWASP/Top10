"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextlintRuleContextImpl = void 0;
var assert_1 = __importDefault(require("assert"));
var TextlintRuleContextFixCommandGeneratorImpl_1 = require("./TextlintRuleContextFixCommandGeneratorImpl");
var TextlintRuleSeverityLevelKeys_1 = require("./TextlintRuleSeverityLevelKeys");
var TextlintRuleErrorImpl_1 = require("./TextlintRuleErrorImpl");
var ruleFixer = new TextlintRuleContextFixCommandGeneratorImpl_1.TextlintRuleContextFixCommandGeneratorImpl();
var TextlintRuleContextImpl = /** @class */ (function () {
    function TextlintRuleContextImpl(args) {
        var _this = this;
        /**
         * report function that is called in a rule
         */
        this.report = function (node, ruleError, _shouldNotUsed) {
            assert_1.default.ok(!(node instanceof TextlintRuleErrorImpl_1.TextlintRuleErrorImpl), "1st argument should be node. Usage: `report(node, ruleError);`");
            assert_1.default.ok(_shouldNotUsed === undefined, "3rd argument should not be used. Usage: `report(node, ruleError);`");
            if (ruleError instanceof TextlintRuleErrorImpl_1.TextlintRuleErrorImpl) {
                // severity come from `.textlintrc` option like `{ "<rule-name>" : { serverity: "warning" } } `
                _this._report({ ruleId: _this._ruleId, node: node, severity: _this._severityLevel, ruleError: ruleError });
            }
            else {
                var ruleReportedObject = ruleError;
                // severity come from report arguments like `report(node, { severity: 1 })`
                var level = ruleReportedObject.severity || TextlintRuleSeverityLevelKeys_1.TextlintRuleSeverityLevelKeys.error;
                _this._report({ ruleId: _this._ruleId, node: node, severity: level, ruleError: ruleReportedObject });
            }
        };
        /**
         * get file path current processing.
         */
        this.getFilePath = function () {
            return _this._sourceCode.getFilePath();
        };
        /**
         * Gets the source code for the given node.
         * @param {TxtNode=} node The AST node to get the text for.
         * @param {int=} beforeCount The number of characters before the node to retrieve.
         * @param {int=} afterCount The number of characters after the node to retrieve.
         * @returns {string} The text representing the AST node.
         */
        this.getSource = function (node, beforeCount, afterCount) {
            return _this._sourceCode.getSource(node, beforeCount, afterCount);
        };
        /**
         * get config base directory path
         * config base directory path often is the place of .textlintrc
         *
         * e.g.) /path/to/dir/.textlintrc
         * `getConfigBaseDir()` return `"/path/to/dir/"`.
         *
         * When using textlint as module, it is specified by `configBaseDir`
         * If not found the value, return undefined.
         *
         * You can use it for resolving relative path from config dir.
         * @returns {string|undefined}
         */
        this.getConfigBaseDir = function () {
            return _this._configBaseDir;
        };
        this._ruleId = args.ruleId;
        this._sourceCode = args.sourceCode;
        this._report = args.report;
        this._configBaseDir = args.configBaseDir;
        this._severityLevel = args.severityLevel;
        Object.freeze(this);
    }
    Object.defineProperty(TextlintRuleContextImpl.prototype, "id", {
        /**
         * Rule id
         * @returns {string}
         */
        get: function () {
            return this._ruleId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextlintRuleContextImpl.prototype, "severity", {
        /**
         * severity level
         */
        get: function () {
            return this._severityLevel;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextlintRuleContextImpl.prototype, "Syntax", {
        /**
         * Node's type values
         * @type {ASTNodeTypes}
         */
        get: function () {
            return this._sourceCode.getSyntax();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextlintRuleContextImpl.prototype, "RuleError", {
        /**
         * CustomError object
         * @type {RuleError}
         */
        get: function () {
            return TextlintRuleErrorImpl_1.TextlintRuleErrorImpl;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextlintRuleContextImpl.prototype, "fixer", {
        /**
         * Rule fixer command object
         * @type {RuleFixer}
         */
        get: function () {
            return ruleFixer;
        },
        enumerable: false,
        configurable: true
    });
    return TextlintRuleContextImpl;
}());
exports.TextlintRuleContextImpl = TextlintRuleContextImpl;
//# sourceMappingURL=TextlintRuleContextImpl.js.map