"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextlintRuleContextFixCommandGeneratorImpl = void 0;
var assert = __importStar(require("assert"));
/**
 * Creates a fix command that inserts text at the specified index in the source text.
 * @param {number} index The 0-based index at which to insert the new text.
 * @param {string} text The text to insert.
 * @returns {IntermediateFixCommand} The fix command.
 * @private
 */
function insertTextAt(index, text) {
    assert.ok(text, "text must be string");
    return {
        range: [index, index],
        text: text,
        isAbsolute: false
    };
}
/**
 * Creates a fix command that inserts text at the specified index in the source text.
 * @param {number} index The 0-based index at which to insert the new text.
 * @param {string} text The text to insert.
 * @returns {IntermediateFixCommand} The fix command.
 * @private
 */
function insertTextAtAbsolute(index, text) {
    assert.ok(text, "text must be string");
    return {
        range: [index, index],
        text: text,
        isAbsolute: true
    };
}
/**
 * Creates code fixing commands for rules.
 * It create command for fixing texts.
 * The `range` arguments of these command is should be **relative** value from reported node.
 * See {@link SourceLocation} class for more detail.
 * @constructor
 */
var TextlintRuleContextFixCommandGeneratorImpl = /** @class */ (function () {
    function TextlintRuleContextFixCommandGeneratorImpl() {
    }
    /**
     * Creates a fix command that inserts text after the given node or token.
     * The fix is not applied until applyFixes() is called.
     * @param {TxtNode} node The node or token to insert after.
     * @param {string} text The text to insert.
     * @returns {IntermediateFixCommand} The fix command.
     */
    TextlintRuleContextFixCommandGeneratorImpl.prototype.insertTextAfter = function (node, text) {
        return insertTextAtAbsolute(node.range[1], text);
    };
    /**
     * Creates a fix command that inserts text after the specified range in the source text.
     * The fix is not applied until applyFixes() is called.
     * @param {number[]} range The range to replace, first item is start of range, second
     *      is end of range.
     *      The `range` should be **relative** value from reported node.
     * @param {string} text The text to insert.
     * @returns {IntermediateFixCommand} The fix command.
     */
    TextlintRuleContextFixCommandGeneratorImpl.prototype.insertTextAfterRange = function (range, text) {
        return insertTextAt(range[1], text);
    };
    /**
     * Creates a fix command that inserts text before the given node or token.
     * The fix is not applied until applyFixes() is called.
     * @param {TxtNode} node The node or token to insert before.
     * @param {string} text The text to insert.
     * @returns {IntermediateFixCommand} The fix command.
     */
    TextlintRuleContextFixCommandGeneratorImpl.prototype.insertTextBefore = function (node, text) {
        return insertTextAtAbsolute(node.range[0], text);
    };
    /**
     * Creates a fix command that inserts text before the specified range in the source text.
     * The fix is not applied until applyFixes() is called.
     * @param {number[]} range The range to replace, first item is start of range, second
     *      is end of range.
     *      The `range` should be **relative** value from reported node.
     * @param {string} text The text to insert.
     * @returns {IntermediateFixCommand} The fix command.
     */
    TextlintRuleContextFixCommandGeneratorImpl.prototype.insertTextBeforeRange = function (range, text) {
        return insertTextAt(range[0], text);
    };
    /**
     * Creates a fix command that replaces text at the node or token.
     * The fix is not applied until applyFixes() is called.
     * @param {TxtNode} node The node or token to remove.
     * @param {string} text The text to insert.
     * @returns {IntermediateFixCommand} The fix command.
     */
    TextlintRuleContextFixCommandGeneratorImpl.prototype.replaceText = function (node, text) {
        return {
            range: node.range,
            text: text,
            isAbsolute: true
        };
    };
    /**
     * Creates a fix command that replaces text at the specified range in the source text.
     * The fix is not applied until applyFixes() is called.
     * @param {number[]} range The range to replace, first item is start of range, second
     *      is end of range.
     *      The `range` should be **relative** value from reported node.
     * @param {string} text The text to insert.
     * @returns {IntermediateFixCommand} The fix command.
     */
    TextlintRuleContextFixCommandGeneratorImpl.prototype.replaceTextRange = function (range, text) {
        return {
            range: range,
            text: text,
            isAbsolute: false
        };
    };
    /**
     * Creates a fix command that removes the node or token from the source.
     * The fix is not applied until applyFixes() is called.
     * @param {TxtNode} node The node or token to remove.
     * @returns {IntermediateFixCommand} The fix command.
     */
    TextlintRuleContextFixCommandGeneratorImpl.prototype.remove = function (node) {
        return this.replaceText(node, "");
    };
    /**
     * Creates a fix command that removes the specified range of text from the source.
     * The fix is not applied until applyFixes() is called.
     * @param {number[]} range The range to remove, first item is start of range, second
     *      is end of range.
     *      The `range` should be **relative** value from reported node.
     * @returns {IntermediateFixCommand} The fix command.
     */
    TextlintRuleContextFixCommandGeneratorImpl.prototype.removeRange = function (range) {
        return this.replaceTextRange(range, "");
    };
    return TextlintRuleContextFixCommandGeneratorImpl;
}());
exports.TextlintRuleContextFixCommandGeneratorImpl = TextlintRuleContextFixCommandGeneratorImpl;
//# sourceMappingURL=TextlintRuleContextFixCommandGeneratorImpl.js.map