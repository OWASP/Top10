"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextlintKernel = void 0;
// MIT Â© 2017- azu
var assert = __importStar(require("assert"));
// sequence
var fixer_processor_1 = __importDefault(require("./fixer/fixer-processor"));
// parallel
var linter_processor_1 = __importDefault(require("./linter/linter-processor"));
// message process manager
var MessageProcessManager_1 = __importDefault(require("./messages/MessageProcessManager"));
var filter_ignored_process_1 = __importDefault(require("./messages/filter-ignored-process"));
var filter_duplicated_process_1 = __importDefault(require("./messages/filter-duplicated-process"));
var filter_severity_process_1 = __importDefault(require("./messages/filter-severity-process"));
var sort_messages_process_1 = __importDefault(require("./messages/sort-messages-process"));
var descriptor_1 = require("./descriptor");
var TextlintSourceCodeImpl_1 = require("./context/TextlintSourceCodeImpl");
var ast_tester_1 = require("@textlint/ast-tester");
var debug_1 = __importDefault(require("debug"));
var debug = debug_1.default("textlint:kernel");
/**
 * add fileName to trailing of error message
 * @param {string|undefined} fileName
 * @param {string} message
 * @returns {string}
 */
function addingAtFileNameToError(fileName, message) {
    if (!fileName) {
        return message;
    }
    return message + "\nat " + fileName;
}
/**
 * TextlintKernel is core logic written by pure JavaScript.
 *
 * Pass
 *
 * - config
 * - plugins
 * - rules
 * - filterRules
 * - messageProcessor
 *
 */
var TextlintKernel = /** @class */ (function () {
    /**
     * @param config
     */
    function TextlintKernel(config) {
        if (config === void 0) { config = {}; }
        // this.config often is undefined.
        this.config = config;
        // Initialize Message Processor
        // Now, It it built-in process only
        // filter `shouldIgnore()` results
        this.messageProcessManager = new MessageProcessManager_1.default([filter_ignored_process_1.default]);
        // filter duplicated messages
        this.messageProcessManager.add(filter_duplicated_process_1.default);
        // filter by severity
        this.messageProcessManager.add(filter_severity_process_1.default(this.config));
        this.messageProcessManager.add(sort_messages_process_1.default);
    }
    /**
     * lint text by registered rules.
     * The result contains target filePath and error messages.
     * @param {string} text
     * @param {Object} options linting options
     * @returns {Promise.<TextlintResult>}
     */
    TextlintKernel.prototype.lintText = function (text, options) {
        var _this = this;
        return Promise.resolve().then(function () {
            var descriptor = new descriptor_1.TextlintKernelDescriptor({
                rules: options.rules || [],
                filterRules: options.filterRules || [],
                plugins: options.plugins || []
            });
            return _this._parallelProcess({
                descriptor: descriptor,
                text: text,
                options: options
            });
        });
    };
    /**
     * fix texts and return fix result object
     * @param {string} text
     * @param {Object} options lint options
     * @returns {Promise.<TextlintFixResult>}
     */
    TextlintKernel.prototype.fixText = function (text, options) {
        var _this = this;
        return Promise.resolve().then(function () {
            var descriptor = new descriptor_1.TextlintKernelDescriptor({
                rules: options.rules || [],
                filterRules: options.filterRules || [],
                plugins: options.plugins || []
            });
            return _this._sequenceProcess({
                descriptor: descriptor,
                options: options,
                text: text
            });
        });
    };
    /**
     * process text in parallel for Rules and return {Promise.<TextLintResult>}
     * In other word, parallel flow process.
     * @param {*} processor
     * @param {string} text
     * @param {Object} options
     * @returns {Promise.<TextlintResult>}
     * @private
     */
    TextlintKernel.prototype._parallelProcess = function (_a) {
        var descriptor = _a.descriptor, text = _a.text, options = _a.options;
        var ext = options.ext, filePath = options.filePath, configBaseDir = options.configBaseDir;
        var plugin = descriptor.findPluginDescriptorWithExt(ext);
        debug("available extensions: %o", descriptor.availableExtensions);
        if (plugin === undefined) {
            throw new Error("Not found available plugin for " + ext);
        }
        debug("use plugin: %s", plugin.id);
        var processor = plugin.processor;
        var _b = processor.processor(ext), preProcess = _b.preProcess, postProcess = _b.postProcess;
        assert.ok(typeof preProcess === "function" && typeof postProcess === "function", "processor should implements {preProcess, postProcess}");
        var preProcessResult = preProcess(text, filePath);
        var isPluginReturnAnAST = ast_tester_1.isTxtAST(preProcessResult);
        var textForAST = isPluginReturnAnAST ? text : preProcessResult.text;
        var ast = isPluginReturnAnAST ? preProcessResult : preProcessResult.ast;
        var sourceCode = new TextlintSourceCodeImpl_1.TextlintSourceCodeImpl({
            text: textForAST,
            ast: ast,
            ext: ext,
            filePath: filePath
        });
        var linterProcessor = new linter_processor_1.default(processor, this.messageProcessManager);
        return linterProcessor
            .process({
            config: this.config,
            ruleDescriptors: descriptor.rule,
            filterRuleDescriptors: descriptor.filterRule,
            sourceCode: sourceCode,
            configBaseDir: configBaseDir
        })
            .catch(function (error) {
            error.message = addingAtFileNameToError(filePath, error.message);
            return Promise.reject(error);
        });
    };
    /**
     * process text in series for Rules and return {Promise.<TextlintFixResult>}
     * In other word, sequence flow process.
     * @param {*} processor
     * @param {string} text
     * @param {TextlintKernelOptions} options
     * @returns {Promise.<TextlintFixResult>}
     * @private
     */
    TextlintKernel.prototype._sequenceProcess = function (_a) {
        var descriptor = _a.descriptor, text = _a.text, options = _a.options;
        var ext = options.ext, filePath = options.filePath, configBaseDir = options.configBaseDir;
        var plugin = descriptor.findPluginDescriptorWithExt(ext);
        debug("available extensions: %o", descriptor.availableExtensions);
        if (plugin === undefined) {
            throw new Error("Not found available plugin for " + ext);
        }
        debug("use plugin: %s", plugin.id);
        var processor = plugin.processor;
        var _b = processor.processor(ext), preProcess = _b.preProcess, postProcess = _b.postProcess;
        assert.ok(typeof preProcess === "function" && typeof postProcess === "function", "processor should implements {preProcess, postProcess}");
        var preProcessResult = preProcess(text, filePath);
        var isPluginReturnAnAST = ast_tester_1.isTxtAST(preProcessResult);
        var textForAST = isPluginReturnAnAST ? text : preProcessResult.text;
        var ast = isPluginReturnAnAST ? preProcessResult : preProcessResult.ast;
        var sourceCode = new TextlintSourceCodeImpl_1.TextlintSourceCodeImpl({
            text: textForAST,
            ast: ast,
            ext: ext,
            filePath: filePath
        });
        var fixerProcessor = new fixer_processor_1.default(processor, this.messageProcessManager);
        return fixerProcessor
            .process({
            config: this.config,
            ruleDescriptors: descriptor.rule,
            filterRules: descriptor.filterRule,
            sourceCode: sourceCode,
            configBaseDir: configBaseDir
        })
            .catch(function (error) {
            error.message = addingAtFileNameToError(filePath, error.message);
            return Promise.reject(error);
        });
    };
    return TextlintKernel;
}());
exports.TextlintKernel = TextlintKernel;
//# sourceMappingURL=textlint-kernel.js.map