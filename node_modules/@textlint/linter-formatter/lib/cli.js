// LICENSE : MIT
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = __importStar(require("fs"));
var index_1 = require("./index");
module.exports = function run(argv, text) {
    return new Promise(function (resolve) {
        var format;
        var optionator = require("optionator")({
            prepend: "Usage: textlint-formatter [options]",
            options: [
                {
                    option: "help",
                    alias: "h",
                    type: "Boolean",
                    description: "displays help"
                },
                {
                    option: "formatter",
                    alias: "f",
                    type: "String",
                    description: "formatter name",
                    example: "textlint -f json README.md | textlint-formatter -f pretty-error"
                },
                {
                    option: "list",
                    alias: "l",
                    type: "Boolean",
                    description: "print available formatters"
                },
                {
                    option: "stdin",
                    type: "Boolean",
                    default: "false",
                    description: "Format text provided on <STDIN>."
                }
            ]
        });
        var options = optionator.parseArgv(argv);
        var files = options._;
        if (options.list) {
            return resolve("Available formatters:\n" +
                index_1.getFormatterList()
                    .map(function (formatter) {
                    return "- " + formatter.name;
                })
                    .join("\n"));
        }
        if (options.help || (!files.length && !text)) {
            return resolve(optionator.generateHelp());
        }
        var content = text ? text : fs.readFileSync(files[0], "utf-8");
        var jsonContent;
        try {
            jsonContent = JSON.parse(content);
        }
        catch (error) {
            return new Error("Content should be json. " + error.message);
        }
        if (options.formatter) {
            format = index_1.createFormatter({
                formatterName: options.formatter
            });
            return resolve(format(jsonContent));
        }
        else {
            // default: use stylish
            format = index_1.createFormatter({
                formatterName: "stylish"
            });
            return resolve(format(jsonContent));
        }
    });
};
//# sourceMappingURL=cli.js.map