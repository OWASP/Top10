import { TextlintPackageNamePrefix } from "./TextlintPackagePrefix";
import { removePrefixFromPackageName, splitKeyToPresetSubRule } from "./KeyPathUtil";
/**
 * normalize `keyPath` that is specific path for rule
 * This normalize function handle ambiguity `key`
 * `keyPath` is one of "preset/rule` key, or "rule" key
 *
 * Note: `textlint-rule-textlint-rule-x`(twice!) is normalized at once.
 * It is edge case and this function can not treat it.
 * @param keyPath
 */
export var normalizeTextlintKeyPath = function (keyPath) {
    var _a = splitKeyToPresetSubRule(keyPath), preset = _a.preset, rule = _a.rule;
    if (!preset) {
        return normalizeTextlintRuleKey(rule);
    }
    return normalizeTextlintRulePresetKey(preset) + "/" + normalizeTextlintRuleKey(rule);
};
/**
 * Normalize to preset-name/rule-name
 */
export var normalizeTextlintPresetSubRuleKey = function (names) {
    var preset = names.preset, rule = names.rule;
    return normalizeTextlintRulePresetKey(preset) + "/" + normalizeTextlintRuleKey(rule);
};
/**
 * Normalize rule key
 * @param name
 */
export var normalizeTextlintRuleKey = function (name) {
    return removePrefixFromPackageName([TextlintPackageNamePrefix.rule], name);
};
/**
 * Normalize filter rule key
 * @param name
 */
export var normalizeTextlintFilterRuleKey = function (name) {
    return removePrefixFromPackageName([TextlintPackageNamePrefix.filterRule], name);
};
/**
 * Normalize rule preset key
 * @param name
 */
export var normalizeTextlintRulePresetKey = function (name) {
    // "preset-<name>" and "textlint-rule-preset-"
    return removePrefixFromPackageName([TextlintPackageNamePrefix.rulePreset, "preset-"], name);
};
/**
 * Normalize plugin key
 * @param name
 */
export var normalizeTextlintPluginKey = function (name) {
    return removePrefixFromPackageName([TextlintPackageNamePrefix.plugin], name);
};
//# sourceMappingURL=TextlintKeyPath.js.map