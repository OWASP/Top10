"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.removePrefixFromPackageName = exports.splitKeyToPresetSubRule = void 0;
// @org/preset/@org/rule
var patternOrgXOrg = /^(@.*?\/.*?)\/(@.*?\/.*?)$/;
// @org/preset/rule
var patternOrgXRule = /^(@.*?\/.*?)\/(.*?)$/;
// preset/@org/rule
var patternPresetXOrg = /^(.*?)\/(@.*?)$/;
// preset/rule
var patternPresetXRule = /^([^@].*?)\/(.*?)$/;
/**
 * pattern list of key path
 */
var patternList = [patternOrgXOrg, patternOrgXRule, patternPresetXOrg, patternPresetXRule];
/**
 * split "preset/rule" string to {preset, rule}
 */
var splitKeyToPresetSubRule = function (name) {
    for (var i = 0; i < patternList.length; i++) {
        var pattern = patternList[i];
        var result = name.match(pattern);
        if (!result) {
            continue;
        }
        return { preset: result[1], rule: result[2] };
    }
    // Other case is a single rule
    // @org/rule or rule
    return {
        preset: null,
        rule: name,
    };
};
exports.splitKeyToPresetSubRule = splitKeyToPresetSubRule;
/**
 * Remove `prefix` from `text`.
 */
var removePrefixFromPackageName = function (prefixList, packageName) {
    for (var i = 0; i < prefixList.length; i++) {
        var prefix = prefixList[i];
        // @scope/name -> @scope/name
        // @scope/textlint-rule-name -> @scope/name
        if (packageName.charAt(0) === "@") {
            var _a = packageName.split("/"), namespace = _a[0], name_1 = _a[1];
            if (name_1.startsWith(prefix)) {
                return namespace + "/" + name_1.slice(prefix.length);
            }
        }
        // name -> name
        // textlint-rule-name -> name
        else if (packageName.startsWith(prefix)) {
            return packageName.slice(prefix.length);
        }
    }
    // No match
    return packageName;
};
exports.removePrefixFromPackageName = removePrefixFromPackageName;
//# sourceMappingURL=KeyPathUtil.js.map