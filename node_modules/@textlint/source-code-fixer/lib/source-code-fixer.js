"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.revertSourceCode = exports.applyFixesToSourceCode = exports.applyFixesToText = void 0;
var debug_1 = __importDefault(require("debug"));
var debug = debug_1.default("textlint:source-code-fixer");
var BOM = "\uFEFF";
/**
 * Compares items in a messages array by line and column.
 * @param {TextlintMessage} a The first message.
 * @param {TextlintMessage} b The second message.
 * @returns {int} -1 if a comes before b, 1 if a comes after b, 0 if equal.
 * @private
 */
function compareMessagesByLocation(a, b) {
    var lineDiff = a.line - b.line;
    if (lineDiff === 0) {
        return a.column - b.column;
    }
    else {
        return lineDiff;
    }
}
function clone(object) {
    return JSON.parse(JSON.stringify(object));
}
/**
 * Applies the fixes to text and return string
 * use applyFixes If you want to use primitive function,
 */
function applyFixesToText(text, messages) {
    var hasBOM = text.charCodeAt(0) === 0xfeff;
    return applyFixesToSourceCode({
        text: text,
        hasBOM: hasBOM
    }, messages).output;
}
exports.applyFixesToText = applyFixesToText;
/**
 * Applies the fixes specified by the messages to the given text. Tries to be
 * smart about the fixes and won't apply fixes over the same area in the text.
 * @param sourceCode The source code to apply the changes to.
 * @param messages The array of messages reported by textlint.
 * @returns An object containing the fixed text and any unfixed messages.
 */
function applyFixesToSourceCode(sourceCode, messages) {
    debug("Applying fixes");
    var text = sourceCode.text;
    // As as result, show diff
    var remainingMessages = [];
    var applyingMessages = [];
    var cloneMessages = messages.slice();
    var fixes = [];
    var lastFixPos = text.length;
    var prefix = sourceCode.hasBOM ? BOM : "";
    cloneMessages.forEach(function (problem) {
        if (problem && problem.fix !== undefined) {
            fixes.push(problem);
        }
        else {
            remainingMessages.push(problem);
        }
    });
    if (fixes.length) {
        debug("Found fixes to apply");
        // sort in reverse order of occurrence
        fixes.sort(function (a, b) {
            return b.fix.range[1] - a.fix.range[1] || b.fix.range[0] - a.fix.range[0];
        });
        // split into array of characters for easier manipulation
        var chars_1 = text.split(""); // range is code-unit based
        fixes.forEach(function (problem) {
            // pickup fix range
            var fix = problem.fix;
            var start = fix.range[0];
            var end = fix.range[1];
            var insertionText = fix.text;
            if (end <= lastFixPos) {
                if (start < 0) {
                    // Remove BOM.
                    prefix = "";
                    start = 0;
                }
                if (start === 0 && insertionText[0] === BOM) {
                    // Set BOM.
                    prefix = BOM;
                    insertionText = insertionText.slice(1);
                }
                var replacedChars = chars_1.splice(start, end - start, insertionText);
                lastFixPos = start;
                var copyOfMessage = clone(problem);
                copyOfMessage.fix = {
                    range: [start, start + insertionText.length],
                    text: replacedChars.join("")
                };
                applyingMessages.push(copyOfMessage);
            }
            else {
                remainingMessages.push(problem);
            }
        });
        return {
            fixed: true,
            messages: cloneMessages,
            applyingMessages: applyingMessages.reverse(),
            remainingMessages: remainingMessages.sort(compareMessagesByLocation),
            output: prefix + chars_1.join("")
        };
    }
    else {
        debug("No fixes to apply");
        return {
            fixed: false,
            messages: cloneMessages,
            applyingMessages: applyingMessages,
            remainingMessages: remainingMessages,
            output: prefix + text
        };
    }
}
exports.applyFixesToSourceCode = applyFixesToSourceCode;
/**
 * revert text using applyingMessages
 * @param sourceCode The source code to apply the changes to.
 * @param applyingMessages The array of TextLintMessage reported by SourceCodeFixer#applyFixes
 * @returns An object containing the fixed text and any unfixed messages.
 */
function revertSourceCode(sourceCode, applyingMessages) {
    debug("Restore applied fixes");
    var text = sourceCode.text;
    applyingMessages.forEach(function (message) {
        var newSource = {
            text: text,
            hasBOM: sourceCode.hasBOM
        };
        var result = applyFixesToSourceCode(newSource, [message]);
        text = result.output;
    });
    return text;
}
exports.revertSourceCode = revertSourceCode;
//# sourceMappingURL=source-code-fixer.js.map