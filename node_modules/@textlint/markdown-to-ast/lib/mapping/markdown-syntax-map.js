// LICENSE : MIT
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyntaxMap = void 0;
var ast_node_types_1 = require("@textlint/ast-node-types");
exports.SyntaxMap = {
    root: ast_node_types_1.ASTNodeTypes.Document,
    paragraph: ast_node_types_1.ASTNodeTypes.Paragraph,
    blockquote: ast_node_types_1.ASTNodeTypes.BlockQuote,
    listItem: ast_node_types_1.ASTNodeTypes.ListItem,
    list: ast_node_types_1.ASTNodeTypes.List,
    Bullet: "Bullet",
    heading: ast_node_types_1.ASTNodeTypes.Header,
    code: ast_node_types_1.ASTNodeTypes.CodeBlock,
    HtmlBlock: ast_node_types_1.ASTNodeTypes.HtmlBlock,
    thematicBreak: ast_node_types_1.ASTNodeTypes.HorizontalRule,
    // inline block
    text: ast_node_types_1.ASTNodeTypes.Str,
    break: ast_node_types_1.ASTNodeTypes.Break,
    emphasis: ast_node_types_1.ASTNodeTypes.Emphasis,
    strong: ast_node_types_1.ASTNodeTypes.Strong,
    html: ast_node_types_1.ASTNodeTypes.Html,
    link: ast_node_types_1.ASTNodeTypes.Link,
    image: ast_node_types_1.ASTNodeTypes.Image,
    inlineCode: ast_node_types_1.ASTNodeTypes.Code,
    delete: ast_node_types_1.ASTNodeTypes.Delete,
    // remark(markdown) extension
    // Following type is not in @textlint/ast-node-types
    yaml: "Yaml",
    table: "Table",
    tableRow: "TableRow",
    tableCell: "TableCell",
    linkReference: "LinkReference",
    imageReference: "ImageReference",
    definition: "Definition",
    /**
     * @deprecated
     */
    ReferenceDef: ast_node_types_1.ASTNodeTypes.ReferenceDef
};
//# sourceMappingURL=markdown-syntax-map.js.map