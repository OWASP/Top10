{"version":3,"sources":["../src/path-to-glob-pattern.js"],"names":["path","require","fs","convertPathToPosix","filePath","normalizedFilePath","normalize","replace","isDirectory","filepath","statSync","error","processPath","options","cwd","extensions","map","ext","suffix","length","join","newPath","resolvedPath","resolve","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,KAAKD,QAAQ,IAAR,CAAX;AACA;;;;;;AAMA,SAASE,kBAAT,CAA4BC,QAA5B,EAAsC;AAClC,QAAMC,qBAAqBL,KAAKM,SAAL,CAAeF,QAAf,CAA3B;AACA,WAAOC,mBAAmBE,OAAnB,CAA2B,KAA3B,EAAkC,GAAlC,CAAP;AACH;;AAGD,IAAMC,cAAc,SAAdA,WAAc,CAACC,QAAD,EAAc;AAC9B,QAAI;AACA,eAAOP,GAAGQ,QAAH,CAAYD,QAAZ,EAAsBD,WAAtB,EAAP;AACH,KAFD,CAEE,OAAOG,KAAP,EAAc;AACZ,eAAO,KAAP;AACH;AACJ,CAND;AAOA;;;;;;;;;;;;;;;;;AAiBA,SAASC,WAAT,CAAqBC,OAArB,EAA8B;AAC1B,QAAMC,MAAMD,QAAQC,GAApB;AACA,QAAIC,aAAaF,QAAQE,UAAzB;;AAEAA,iBAAaA,WAAWC,GAAX,CAAe;AAAA,eAAOC,IAAIV,OAAJ,CAAY,KAAZ,EAAmB,EAAnB,CAAP;AAAA,KAAf,CAAb;;AAEA,QAAIW,SAAS,KAAb;AACA,QAAIH,WAAWI,MAAX,KAAsB,CAA1B,EAA6B;AACzB;AACAD,kBAAU,IAAV;AACH,KAHD,MAGO,IAAIH,WAAWI,MAAX,KAAsB,CAA1B,EAA6B;AAChCD,0BAAgBH,WAAW,CAAX,CAAhB;AACH,KAFM,MAEA;AACHG,2BAAiBH,WAAWK,IAAX,CAAgB,GAAhB,CAAjB;AACH;;AAED;;;;;;;AAOA,WAAO,UAAShB,QAAT,EAAmB;AACtB,YAAIiB,UAAUjB,QAAd;AACA,YAAMkB,eAAetB,KAAKuB,OAAL,CAAaT,GAAb,EAAkBV,QAAlB,CAArB;;AAEA,YAAII,YAAYc,YAAZ,CAAJ,EAA+B;AAC3BD,sBAAUjB,SAASG,OAAT,CAAiB,QAAjB,EAA2B,EAA3B,IAAiCW,MAA3C;AACH;;AAED,eAAOf,mBAAmBkB,OAAnB,CAAP;AACH,KATD;AAUH;AACDG,OAAOC,OAAP,GAAiBb,WAAjB","file":"path-to-glob-pattern.js","sourcesContent":["// MIT Â© 2017 azu\n// and\n// https://github.com/eslint/eslint/blob/master/tests/lib/util/glob-util.js\n// ESLint\n// Copyright JS Foundation and other contributors, https://js.foundation\n\"use strict\";\nconst path = require(\"path\");\nconst fs = require(\"fs\");\n/**\n * Replace Windows with posix style paths\n *\n * @param {string} filePath   Path to convert\n * @returns {string}          Converted filepath\n */\nfunction convertPathToPosix(filePath) {\n    const normalizedFilePath = path.normalize(filePath);\n    return normalizedFilePath.replace(/\\\\/g, \"/\");\n}\n\n\nconst isDirectory = (filepath) => {\n    try {\n        return fs.statSync(filepath).isDirectory()\n    } catch (error) {\n        return false;\n    }\n};\n/**\n * Checks if a provided path is a directory and returns a glob string matching\n * all files under that directory if so, the path itself otherwise.\n *\n * Reason for this is that `glob` needs `/**` to collect all the files under a\n * directory where as our previous implementation without `glob` simply walked\n * a directory that is passed. So this is to maintain backwards compatibility.\n *\n * Also makes sure all path separators are POSIX style for `glob` compatibility.\n *\n * @param {Object}   [options]                    An options object\n * @param {string[]} [options.extensions=[]] An array of accepted extensions\n * @param {string}   [options.cwd=process.cwd()]  The cwd to use to resolve relative pathnames\n * @returns {Function} A function that takes a pathname and returns a glob that\n *                     matches all files with the provided extensions if\n *                     pathname is a directory.\n */\nfunction processPath(options) {\n    const cwd = options.cwd;\n    let extensions = options.extensions;\n\n    extensions = extensions.map(ext => ext.replace(/^\\./, \"\"));\n\n    let suffix = \"/**\";\n    if (extensions.length === 0) {\n        // no extension option\n        suffix += \"/*\";\n    } else if (extensions.length === 1) {\n        suffix += `/*.${extensions[0]}`;\n    } else {\n        suffix += `/*.{${extensions.join(\",\")}}`;\n    }\n\n    /**\n     * A function that converts a directory name to a glob pattern\n     *\n     * @param {string} filePath The directory path to be modified\n     * @returns {string} The glob path or the file path itself\n     * @private\n     */\n    return function(filePath) {\n        let newPath = filePath;\n        const resolvedPath = path.resolve(cwd, filePath);\n\n        if (isDirectory(resolvedPath)) {\n            newPath = filePath.replace(/[/\\\\]$/, \"\") + suffix;\n        }\n\n        return convertPathToPosix(newPath);\n    };\n}\nmodule.exports = processPath;"]}